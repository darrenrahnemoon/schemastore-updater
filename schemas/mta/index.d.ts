/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * MTA DESCRIPTOR SCHEMA
 */
export interface ComSapMtaMtaSchema_320 {
  /**
   * The schema version that is being used for authoring a descriptor. The schema version should comply with the semantic versioning standard.
   */
  "_schema-version": string;
  /**
   * An application ID, that may contain any number of unicode characters and should be unique in the target runtime environment.
   */
  ID: string;
  /**
   * A free text describing this application.
   */
  description?: string;
  /**
   * The application version that should comply with the semantic versioning standard.
   */
  version: string;
  /**
   * The provider or vendor of this application.
   */
  provider?: string;
  /**
   * A copyright statement from the provider.
   */
  copyright?: string;
  /**
   * A list of modules.
   */
  modules?: {
    /**
     * The MTA module name which must be unique and cannot be the same as any provided property set or resource name.
     */
    name: string;
    /**
     * The module type that defines the design-time tools for the module.
     */
    type: string;
    /**
     * A free text describing this module.
     */
    description?: string;
    /**
     * The path to a folder that contains the module artifacts.
     */
    path?: string;
    /**
     * A list of modules that must be deployed before deploying the current module.
     */
    "deployed-after"?: string[];
    /**
     * A collection of key-value pairs that are available to the module at runtime.
     */
    properties?: {
      [k: string]: any;
    };
    /**
     * Additional information about the module's properties.
     */
    "properties-metadata"?: {
      overwritable?: boolean;
      optional?: boolean;
      datatype?: "str" | "int" | "float" | "bool";
      [k: string]: any;
    };
    /**
     * Configuration parameters that are used when deploying the module to the target runtime environment.
     */
    parameters?: {
      [k: string]: any;
    };
    /**
     * Additional information about the module's parameters.
     */
    "parameters-metadata"?: {
      overwritable?: boolean;
      optional?: boolean;
      [k: string]: any;
    };
    /**
     * The build parameters define how the module is built by the corresponding tool.
     */
    "build-parameters"?: {
      [k: string]: any;
    };
    /**
     * It is possible to define parameters in external files. The "includes" section is used to point to those files.
     */
    includes?: {
      /**
       * The name of an "includes" section. This name is used by a builder to generate a parameter section in the deployment descriptor.
       */
      name: string;
      /**
       * A path pointing to a file that contains a map of parameters, either in JSON or in YAML format.
       */
      path: string;
      [k: string]: any;
    }[];
    /**
     * Used to define the named property sets that other modules and resources can require.
     */
    provides?: {
      /**
       * The name of the property set that the module provides. The provided name must be unique and cannot be the same as any resource or module name.
       */
      name: string;
      /**
       * Configures the accessibility of the provided property set; if set to "true", it is publically accessible and can be consumed by other MTA projects.
       */
      public?: boolean;
      /**
       * A list of properties that are included in this property set.
       */
      properties?: {
        [k: string]: any;
      };
      /**
       * Additional information about the provided set's properties.
       */
      "properties-metadata"?: {
        overwritable?: boolean;
        optional?: boolean;
        datatype?: "str" | "int" | "float" | "bool";
        [k: string]: any;
      };
      [k: string]: any;
    }[];
    /**
     * A list of property sets provided by other modules and/or resources (providers) that this module requires.
     */
    requires?: {
      /**
       * The name of a provided property set or resource (provider) that this module requires.
       */
      name: string;
      /**
       * A "group" can be used to combine properties from multiple providers into one runtime lookup object, such as an environment variable. As of schema version 2.1, this property is DEPRECATED.
       */
      group?: string;
      /**
       * Defines a name for a runtime lookup object, such as an environment variable, if the required property set contains multiple values; for example, if used to consume configuration data from outside this MTA project.
       */
      list?: string;
      /**
       * Module properties whose values are determined by the provided properties. These properties can be referenced by the tilde notation: "~{<provided-property-name>}"
       */
      properties?: {
        [k: string]: any;
      };
      /**
       * Additional information about the modules's properties.
       */
      "properties-metadata"?: {
        overwritable?: boolean;
        optional?: boolean;
        datatype?: "str" | "int" | "float" | "bool";
        [k: string]: any;
      };
      /**
       * Configuration parameters that are used when deploying the module to the target runtime environment.
       */
      parameters?: {
        [k: string]: any;
      };
      /**
       * Additional information about the modules's parameters.
       */
      "parameters-metadata"?: {
        overwritable?: boolean;
        optional?: boolean;
        [k: string]: any;
      };
      /**
       * It is possible to define parameters in external files. The "includes" section is used to point to those files.
       */
      includes?: {
        /**
         * The name of an "includes" section. This name is used by a builder to generate a parameter section in the deployment descriptor.
         */
        name: string;
        /**
         * A path pointing to a file that contains a map of parameters, either in JSON or in YAML format.
         */
        path: string;
        [k: string]: any;
      }[];
      [k: string]: any;
    }[];
    [k: string]: any;
  }[];
  /**
   * A list of resources that are required by the modules of this MTA project.
   */
  resources?: {
    /**
     * The resource name which must be unique and cannot be the same as any provided property set or module name.
     */
    name: string;
    /**
     * A type of resource supported by deployment tools in the target environment.
     */
    type?: string;
    /**
     * A free text describing this resource.
     */
    description?: string;
    /**
     * A collection of key-value pairs that can be required by modules and/or other resources as configuration data at runtime.
     */
    properties?: {
      [k: string]: any;
    };
    /**
     * Additional information about the resource's properties.
     */
    "properties-metadata"?: {
      overwritable?: boolean;
      optional?: boolean;
      datatype?: "str" | "int" | "float" | "bool";
      [k: string]: any;
    };
    /**
     * Configuration parameters that are used when provisioning the resource in the target runtime environment.
     */
    parameters?: {
      [k: string]: any;
    };
    /**
     * Additional information about the resource's parameters.
     */
    "parameters-metadata"?: {
      overwritable?: boolean;
      optional?: boolean;
      [k: string]: any;
    };
    /**
     * It is possible to define parameters in external files. The "includes" section is used to point to those files.
     */
    includes?: {
      /**
       * The name of an "includes" section. This name is used by a builder to generate a parameter section in the deployment descriptor.
       */
      name: string;
      /**
       * A path pointing to a file that contains a map of parameters, either in JSON or in YAML format.
       */
      path: string;
      [k: string]: any;
    }[];
    /**
     * If the resource is set to optional and the deployment tools are unable to allocate it, then the tools will issue a warning and continue the deployment process.
     */
    optional?: boolean;
    /**
     * If a resource is declared to be inactive, the resource will not be allocated during the deployment process.
     */
    active?: boolean;
    /**
     * A list of property sets provided by other modules and/or resources (providers) that this resource requires.
     */
    requires?: {
      /**
       * The name of a provided property set or resource (provider) that this resource requires.
       */
      name: string;
      /**
       * Resource properties whose values are determined by the provided properties. These properties can be referenced by the tilde notation: "~{<provided-property-name>}"
       */
      properties?: {
        [k: string]: any;
      };
      /**
       * Additional information about the required properties.
       */
      "properties-metadata"?: {
        overwritable?: boolean;
        optional?: boolean;
        datatype?: "str" | "int" | "float" | "bool";
        [k: string]: any;
      };
      /**
       * Configuration parameters that are used when provisioning the resource in the target runtime environment.
       */
      parameters?: {
        [k: string]: any;
      };
      /**
       * Additional information about the required parameters.
       */
      "parameters-metadata"?: {
        overwritable?: boolean;
        optional?: boolean;
        [k: string]: any;
      };
      /**
       * It is possible to define parameters in external files. The "includes" section is used to point to those files.
       */
      includes?: {
        /**
         * The name of an "includes" section. This name is used by a builder to generate a parameter section in the deployment descriptor.
         */
        name: string;
        /**
         * A path pointing to a file that contains a map of parameters, either in JSON or in YAML format.
         */
        path: string;
        [k: string]: any;
      }[];
      [k: string]: any;
    }[];
    [k: string]: any;
  }[];
  /**
   * Global parameters that are used when building or deploying the application
   */
  parameters?: {
    [k: string]: any;
  };
  /**
   * Additional information about the global parameters.
   */
  "parameters-metadata"?: {
    overwritable?: boolean;
    optional?: boolean;
    [k: string]: any;
  };
  /**
   * It is possible to define parameters in external files. The "includes" section is used to point to those files.
   */
  includes?: {
    /**
     * The name of an "includes" section. This name is used by a builder to generate a parameter section in the deployment descriptor.
     */
    name: string;
    /**
     * A path pointing to a file that contains a map of parameters, either in JSON or in YAML format.
     */
    path: string;
    [k: string]: any;
  }[];
  [k: string]: any;
}
