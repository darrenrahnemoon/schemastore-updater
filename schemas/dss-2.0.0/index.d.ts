/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Dss20 {
  signReq?: Dss2SignRequestType;
  signResp?: Dss2SignResponseType;
  verifyReq?: Dss2VerifyRequestType;
  verifyResp?: Dss2VerifyResponseType;
  pendingReq?: Dss2PendingRequestType;
  genericResp?: DsbResponseBaseType;
  [k: string]: any;
}
export interface Dss2SignRequestType {
  profile?: string[];
  reqID?: string;
  inDocs?: Dss2InputDocumentsType;
  optInp?: Dss2OptionalInputsSignType;
  [k: string]: any;
}
export interface Dss2InputDocumentsType {
  doc?: Dss2DocumentType[];
  transformed?: Dss2TransformedDataType[];
  docHash?: Dss2DocumentHashType[];
  [k: string]: any;
}
export interface Dss2DocumentType {
  ID?: string;
  refURI?: string;
  refType?: string;
  schemaRefs?: Dss2DocumentType[];
  b64Data: DsbBase64DataType;
  [k: string]: any;
}
export interface DsbBase64DataType {
  ID?: string;
  val?: string;
  attRef?: DsbAttachmentReferenceType;
  mimeType?: string;
  idRef?: string;
  [k: string]: any;
}
export interface DsbAttachmentReferenceType {
  di?: DsbDigestInfoType[];
  attURI: string;
  [k: string]: any;
}
export interface DsbDigestInfoType {
  alg: string;
  val: string;
  [k: string]: any;
}
export interface Dss2TransformedDataType {
  ID?: string;
  refURI?: string;
  refType?: string;
  schemaRefs?: Dss2DocumentType[];
  transforms?: DsigrwTransformsType;
  b64Data: DsbBase64DataType;
  whichRef?: number;
  [k: string]: any;
}
export interface DsigrwTransformsType {
  transform: DsigrwTransformType[];
  [k: string]: any;
}
export interface DsigrwTransformType {
  xpath?: string[];
  val?: string;
  b64Content?: string;
  xPath?: string[];
  nsDecl?: DsbNsPrefixMappingType[];
  alg: string;
  [k: string]: any;
}
export interface DsbNsPrefixMappingType {
  uri: string;
  pre: string;
  [k: string]: any;
}
export interface Dss2DocumentHashType {
  ID?: string;
  refURI?: string;
  refType?: string;
  schemaRefs?: Dss2DocumentType[];
  transforms?: DsigrwTransformsType;
  dis: DsbDigestInfoType[];
  whichRef?: number;
  [k: string]: any;
}
export interface Dss2OptionalInputsSignType {
  policy?: string[];
  lang?: string;
  other?: DsbAnyType[];
  claimedIdentity?: Dss2ClaimedIdentityType;
  schemas?: Dss2SchemasType;
  addTimestamp?: Dss2AugmentSignatureInstructionType;
  sigType?: string;
  aud?: Dss2IntendedAudienceType;
  keySel?: Dss2KeySelectorType[];
  props?: Dss2PropertiesHolderType;
  incObj?: Dss2IncludeObjectType[];
  incContent?: boolean;
  sigPlacement?: Dss2SignaturePlacementType;
  signedRefs?: Dss2SignedReferencesType;
  nonce?: number;
  sigAlgo?: string;
  quality?: string;
  [k: string]: any;
}
export interface DsbAnyType {
  ID?: string;
  val?: string;
  attRef?: DsbAttachmentReferenceType;
  mimeType?: string;
  idRef?: string;
  [k: string]: any;
}
export interface Dss2ClaimedIdentityType {
  name: Saml2RwNameIDType;
  suppInfo?: DsbAnyType;
  [k: string]: any;
}
export interface Saml2RwNameIDType {
  spprovidedID?: string;
  spnameQualifier?: string;
  value?: string;
  format?: string;
  provId?: string;
  nameQual?: string;
  spNameQual?: string;
  [k: string]: any;
}
export interface Dss2SchemasType {
  schema: Dss2DocumentType[];
  [k: string]: any;
}
export interface Dss2AugmentSignatureInstructionType {
  type?: string;
  [k: string]: any;
}
export interface Dss2IntendedAudienceType {
  recipient: Saml2RwNameIDType[];
  [k: string]: any;
}
export interface Dss2KeySelectorType {
  x509Digest?: Dss2X509DigestType;
  sub?: string;
  ski?: string;
  cert?: string;
  name?: string;
  [k: string]: any;
}
export interface Dss2X509DigestType {
  value?: string;
  alg: string;
  [k: string]: any;
}
export interface Dss2PropertiesHolderType {
  signedProps?: Dss2PropertiesType;
  unsignedProps?: Dss2PropertiesType;
  [k: string]: any;
}
export interface Dss2PropertiesType {
  prop: Dss2PropertyType[];
  [k: string]: any;
}
export interface Dss2PropertyType {
  id: string;
  val?: DsbAnyType;
  [k: string]: any;
}
export interface Dss2IncludeObjectType {
  whichDoc?: Dss2DocumentBaseType;
  hasObjectTagsAndAttributesSet?: boolean;
  objId?: string;
  createRef?: boolean;
  [k: string]: any;
}
export interface Dss2DocumentBaseType {
  ID?: string;
  refURI?: string;
  refType?: string;
  schemaRefs?: Dss2DocumentType[];
  [k: string]: any;
}
export interface Dss2SignaturePlacementType {
  xpathAfter?: string;
  xpathFirstChildOf?: string;
  xPathAfter?: string;
  xPathFirstChildOf?: string;
  nsDecl?: DsbNsPrefixMappingType[];
  whichDoc?: Dss2DocumentBaseType;
  createEnvelopedSignature?: boolean;
  [k: string]: any;
}
export interface Dss2SignedReferencesType {
  signedRef: Dss2SignedReferenceType[];
  [k: string]: any;
}
export interface Dss2SignedReferenceType {
  transforms?: DsigrwTransformsType;
  whichDoc: Dss2DocumentBaseType;
  refURI?: string;
  refId?: string;
  [k: string]: any;
}
export interface Dss2SignResponseType {
  result?: DsbResultType;
  profile?: string[];
  reqID?: string;
  respID?: string;
  optOutp?: Dss2OptionalOutputsSignType;
  sigObj?: Dss2SignatureObjectType;
  [k: string]: any;
}
export interface DsbResultType {
  maj:
    | "urn:oasis:names:tc:dss:1.0:resultmajor:Success"
    | "urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError"
    | "urn:oasis:names:tc:dss:1.0:resultmajor:ResponderError"
    | "urn:oasis:names:tc:dss:1.0:resultmajor:InsufficientInformation"
    | "urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:resultmajor:Pending";
  min?: string;
  msg?: DsbInternationalStringType;
  pRef?: string;
  [k: string]: any;
}
export interface DsbInternationalStringType {
  value?: string;
  lang: string;
  [k: string]: any;
}
export interface Dss2OptionalOutputsSignType {
  policy?: string[];
  other?: DsbAnyType[];
  transformed?: Dss2TransformedDocumentType;
  schemas?: Dss2SchemasType;
  docWithSignature?: Dss2DocumentWithSignatureType;
  [k: string]: any;
}
export interface Dss2TransformedDocumentType {
  doc: Dss2DocumentType;
  whichRef: number;
  [k: string]: any;
}
export interface Dss2DocumentWithSignatureType {
  doc: Dss2DocumentType;
  [k: string]: any;
}
export interface Dss2SignatureObjectType {
  b64Sig?: DsbBase64DataType;
  sigPtr?: Dss2SignaturePtrType;
  schemaRefs?: Dss2DocumentBaseType[];
  [k: string]: any;
}
export interface Dss2SignaturePtrType {
  xpath?: string;
  nsDecl?: DsbNsPrefixMappingType[];
  whichDoc: Dss2DocumentBaseType;
  xPath?: string;
  [k: string]: any;
}
export interface Dss2VerifyRequestType {
  profile?: string[];
  reqID?: string;
  inDocs?: Dss2InputDocumentsType;
  optInp?: Dss2OptionalInputsVerifyType;
  sigObj?: Dss2SignatureObjectType;
  [k: string]: any;
}
export interface Dss2OptionalInputsVerifyType {
  policy?: string[];
  lang?: string;
  other?: DsbAnyType[];
  claimedIdentity?: Dss2ClaimedIdentityType;
  schemas?: Dss2SchemasType;
  addTimestamp?: Dss2AugmentSignatureInstructionType;
  useVerificationTime?: Dss2UseVerificationTimeType;
  returnVerificationTime?: boolean;
  addKeyInfo?: Dss2AdditionalKeyInfoType[];
  returnProcDetails?: boolean;
  returnSigningTime?: boolean;
  returnSigner?: boolean;
  returnAugmented?: Dss2AugmentSignatureInstructionType[];
  returnTransformed?: Dss2ReturnTransformedDocumentType[];
  returnTimestamped?: Dss2AugmentSignatureInstructionType;
  verifyManifests?: boolean;
  [k: string]: any;
}
export interface Dss2UseVerificationTimeType {
  currTime?: boolean;
  specTime?: number;
  b64Content?: string;
  [k: string]: any;
}
export interface Dss2AdditionalKeyInfoType {
  ocspresponse?: DsbBase64DataType;
  x509Digest?: Dss2X509DigestType;
  sub?: string;
  ski?: string;
  cert?: DsbBase64DataType;
  name?: string;
  crl?: DsbBase64DataType;
  ocsp?: DsbBase64DataType;
  poe?: DsbBase64DataType;
  [k: string]: any;
}
export interface Dss2ReturnTransformedDocumentType {
  whichRef: number;
  [k: string]: any;
}
export interface Dss2VerifyResponseType {
  result?: DsbResultType;
  profile?: string[];
  reqID?: string;
  respID?: string;
  optOutp?: Dss2OptionalOutputsVerifyType;
  [k: string]: any;
}
export interface Dss2OptionalOutputsVerifyType {
  policy?: string[];
  other?: DsbAnyType[];
  transformed?: Dss2TransformedDocumentType;
  schemas?: Dss2SchemasType;
  docWithSignature?: Dss2DocumentWithSignatureType;
  result?: Dss2VerifyManifestResultsType;
  signingTimeInfo?: Dss2SigningTimeInfoType;
  verificationTimeInfo?: Dss2VerificationTimeInfoType;
  procDetails?: Dss2ProcessingDetailsType;
  signerIdentity?: Saml2RwNameIDType;
  augSig?: Dss2AugmentedSignatureType;
  timestampedSig?: Dss2AugmentedSignatureType;
  [k: string]: any;
}
export interface Dss2VerifyManifestResultsType {
  result: Dss2ManifestResultType[];
  [k: string]: any;
}
export interface Dss2ManifestResultType {
  xPath: string;
  status: "urn:oasis:names:tc:dss:1.0:manifeststatus:Valid" | "urn:oasis:names:tc:dss:1.0:manifeststatus:Invalid";
  nsDecl?: DsbNsPrefixMappingType[];
  [k: string]: any;
}
export interface Dss2SigningTimeInfoType {
  signingTime: number;
  signingTimeBounds?: Dss2SigningTimeInfoTypeSigningTimeBoundaries;
  [k: string]: any;
}
export interface Dss2SigningTimeInfoTypeSigningTimeBoundaries {
  lowerBound?: number;
  upperBound?: number;
  [k: string]: any;
}
export interface Dss2VerificationTimeInfoType {
  verificationTime: number;
  additionalTimeInfo?: Dss2AdditionalTimeInfoType[];
  [k: string]: any;
}
export interface Dss2AdditionalTimeInfoType {
  value?: number;
  type: string;
  ref?: string;
  [k: string]: any;
}
export interface Dss2ProcessingDetailsType {
  valid?: Dss2DetailType[];
  indeterminate?: Dss2DetailType[];
  invalid?: Dss2DetailType[];
  [k: string]: any;
}
export interface Dss2DetailType {
  code?: string;
  msg?: DsbInternationalStringType;
  b64Content?: string;
  type: string;
  [k: string]: any;
}
export interface Dss2AugmentedSignatureType {
  sigObj: Dss2SignatureObjectType;
  type?: string;
  [k: string]: any;
}
export interface Dss2PendingRequestType {
  profile?: string[];
  reqID?: string;
  claimedIdentity?: Dss2ClaimedIdentityType;
  [k: string]: any;
}
export interface DsbResponseBaseType {
  result: DsbResultType;
  profile?: string[];
  reqID?: string;
  respID?: string;
  [k: string]: any;
}
