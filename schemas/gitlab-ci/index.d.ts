/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the docker image to use for the job or globally for all jobs. Job configuration takes precedence over global setting. Requires a certain kind of Gitlab runner executor.
 */
export type Image =
  | string
  | {
      /**
       * Full name of the image that should be used. It should contain the Registry part if needed.
       */
      name: string;
      /**
       * Command or script that should be executed as the container's entrypoint. It will be translated to Docker's --entrypoint option while creating the container. The syntax is similar to Dockerfile's ENTRYPOINT directive, where each shell token is a separate string in the array.
       */
      entrypoint?: any[];
      [k: string]: any;
    };
/**
 * Similar to `image` property, but will link the specified services to the `image` container.
 */
export type Services = (
  | string
  | {
      /**
       * Full name of the image that should be used. It should contain the Registry part if needed.
       */
      name: string;
      /**
       * Command or script that should be executed as the container's entrypoint. It will be translated to Docker's --entrypoint option while creating the container. The syntax is similar to Dockerfile's ENTRYPOINT directive, where each shell token is a separate string in the array.
       */
      entrypoint?: string[];
      /**
       * Command or script that should be used as the container's command. It will be translated to arguments passed to Docker after the image's name. The syntax is similar to Dockerfile's CMD directive, where each shell token is a separate string in the array.
       */
      command?: string[];
      /**
       * Additional alias that can be used to access the service from the job's container. Read Accessing the services for more information.
       */
      alias?: string;
      [k: string]: any;
    })[];
/**
 * Defines scripts that should run *before* the job. Can be set globally or per job.
 */
export type BeforeScript = string[];
/**
 * Defines scripts that should run *after* the job. Can be set globally or per job.
 */
export type AfterScript = string[];
/**
 * Filter job by different keywords that determine origin or state, or by supplying string/regex to check against branch/tag names.
 */
export type FilterRefs = (
  | ("branches" | "tags" | "api" | "external" | "pipelines" | "pushes" | "schedules" | "triggers" | "web")
  | string)[];

/**
 * Gitlab has a built-in solution for doing CI called Gitlab CI. It is configured by supplying a file called `.gitlab-ci.yml`, which will list all the jobs that are going to run for the project. A full list of all options can be found at https://docs.gitlab.com/ee/ci/yaml/. You can read more about Gitlab CI at https://docs.gitlab.com/ee/ci/README.html.
 */
export interface GitlabCiConfiguration {
  $schema?: string;
  image?: Image;
  services?: Services;
  before_script?: BeforeScript;
  after_script?: AfterScript;
  variables?: Variables;
  cache?: Cache;
  /**
   * Groups jobs into stages. All jobs in one stage must complete before next stage is executed. Defaults to ['build', 'test', 'deploy'].
   */
  stages?: string[];
  /**
   * Can be string or array of strings which should be an URL or local file reference (e.g. '/templates/ci-template.yml'). The external content will be fetched, included and evaluated along the `.gitlab-ci.yml`.
   */
  include?: string | string[];
  /**
   * A special job used to upload static sites to Gitlab pages. Requires a `public/` directory with `artifacts.path` pointing to it.
   */
  pages?: {
    image?: Image;
    services?: Services;
    before_script?: BeforeScript;
    after_script?: AfterScript;
    variables?: Variables;
    cache?: Cache;
    /**
     * Shell scripts executed by the Runner. The only required property of jobs. Be careful with special characters (e.g. `:`, `{`, `}`, `&`) and use single or double quotes to avoid issues.
     */
    script: string | string[];
    /**
     * Define what stage the job will run in.
     */
    stage?: string;
    /**
     * Job will run *only* when these filtering options match.
     */
    only?:
      | FilterRefs
      | {
          refs?: FilterRefs;
          /**
           * Filter job based on if Kubernetes integration is active.
           */
          kubernetes?: "active";
          /**
           * Filter job by checking comparing values of environment variables. Read more about variable expressions: https://docs.gitlab.com/ee/ci/variables/README.html#variables-expressions
           */
          variables?: string[];
        };
    /**
     * Job will run *except* for when these filtering options match.
     */
    except?:
      | FilterRefs
      | {
          refs?: FilterRefs;
          /**
           * Filter job based on if Kubernetes integration is active.
           */
          kubernetes?: "active";
          /**
           * Filter job by checking comparing values of environment variables. Read more about variable expressions: https://docs.gitlab.com/ee/ci/variables/README.html#variables-expressions
           */
          variables?: string[];
        };
    /**
     * Used to select runners from the list of available runners. A runner must have all tags listed here to run the job.
     */
    tags?: string[];
    /**
     * Setting this option to true will allow the job to fail while still letting the pipeline pass.
     */
    allow_failure?: boolean;
    /**
     * Describes the conditions for when to run the job. Defaults to 'on_success'.
     */
    when?: "on_success" | "on_failure" | "always" | "manual";
    /**
     * Specify a list of job names from earlier stages from which artifacts should be loaded. By default, all previous artifacts are passed. Use an empty array to skip downloading artifacts.
     */
    dependencies?: string[];
    /**
     * Used to specify a list of files and directories that should be attached to the job if it succeeds. Artifacts are sent to Gitlab where they can be downloaded.
     */
    artifacts?: {
      /**
       * A list of paths to files/folders that should be included in the artifact.
       */
      paths?: string[];
      /**
       * Name for the archive created on job success. Can use variables in the name, e.g. '$CI_JOB_NAME'
       */
      name?: string;
      /**
       * Whether to add all untracked files (along with 'artifacts.paths') to the artifact.
       */
      untracked?: boolean;
      /**
       * Configure when artifacts are uploaded depended on job status.
       */
      when?: "on_success" | "on_failure" | "always";
      /**
       * How long artifacts should be kept. They are saved 30 days by default. Artifacts that have expired are removed periodically via cron job. Supports a wide variety of formats, e.g. '1 week', '3 mins 4 sec', '2 hrs 20 min', '2h20min', '6 mos 1 day', '47 yrs 6 mos and 4d', '3 weeks and 2 days'.
       */
      expire_in?: string;
      reports?: {
        /**
         * Path for file(s) that should be parsed as JUnit XML result
         */
        junit?: string | string[];
        [k: string]: any;
      };
    };
    /**
     * Used to associate environment metadata with a deploy. Environment can have a name and URL attached to it, and will be displayed under /environments under the project.
     */
    environment?: {
      /**
       * The name of the environment, e.g. 'qa', 'staging', 'production'.
       */
      name: string;
      /**
       * When set, this will expose buttons in various places for the current environment in Gitlab, that will take you to the defined URL.
       */
      url?: string;
      /**
       * The name of a job to execute when the environment is about to be stopped.
       */
      on_stop?: string;
      /**
       * Stops this environment so that it is inactive.
       */
      action?: "stop";
    };
    /**
     * Must be a regular expression, optionally but recommended to be quoted, and must be surrounded with '/'. Example: '/Code coverage: \d+\.\d+/'
     */
    coverage?: string;
    /**
     * The number of times the job will be retried if it fails. Defaults to 0 and can max be retried 2 times (3 times total).
     */
    retry?: number;
  };
  [k: string]: Job;
}
/**
 * Defines environment variables for specific jobs or globally. Job level property overrides global variables. If a job sets `variables: {}`, all global variables are turned off.
 */
export interface Variables {
  [k: string]: string;
}
/**
 * Specify files or directories to cache between jobs. Can be set globally or per job.
 */
export interface Cache {
  /**
   * List of files or paths to cache.
   */
  paths?: string[];
  /**
   * Unique cache ID, to allow e.g. specific branch or job cache. Environment variables can be used to set up unique keys (e.g. "$CI_COMMIT_REF_SLUG" for per branch cache).
   */
  key?: string;
  /**
   * Set to `true` to cache untracked files.
   */
  untracked?: boolean;
  /**
   * Determines the strategy for downloading and updating the cache.
   */
  policy?: "pull" | "push" | "pull-push";
}
export interface Job {
  image?: Image;
  services?: Services;
  before_script?: BeforeScript;
  after_script?: AfterScript;
  variables?: Variables;
  cache?: Cache;
  /**
   * Shell scripts executed by the Runner. The only required property of jobs. Be careful with special characters (e.g. `:`, `{`, `}`, `&`) and use single or double quotes to avoid issues.
   */
  script: string | string[];
  /**
   * Define what stage the job will run in.
   */
  stage?: string;
  /**
   * Job will run *only* when these filtering options match.
   */
  only?:
    | FilterRefs
    | {
        refs?: FilterRefs;
        /**
         * Filter job based on if Kubernetes integration is active.
         */
        kubernetes?: "active";
        /**
         * Filter job by checking comparing values of environment variables. Read more about variable expressions: https://docs.gitlab.com/ee/ci/variables/README.html#variables-expressions
         */
        variables?: string[];
      };
  /**
   * Job will run *except* for when these filtering options match.
   */
  except?:
    | FilterRefs
    | {
        refs?: FilterRefs;
        /**
         * Filter job based on if Kubernetes integration is active.
         */
        kubernetes?: "active";
        /**
         * Filter job by checking comparing values of environment variables. Read more about variable expressions: https://docs.gitlab.com/ee/ci/variables/README.html#variables-expressions
         */
        variables?: string[];
      };
  /**
   * Used to select runners from the list of available runners. A runner must have all tags listed here to run the job.
   */
  tags?: string[];
  /**
   * Setting this option to true will allow the job to fail while still letting the pipeline pass.
   */
  allow_failure?: boolean;
  /**
   * Describes the conditions for when to run the job. Defaults to 'on_success'.
   */
  when?: "on_success" | "on_failure" | "always" | "manual";
  /**
   * Specify a list of job names from earlier stages from which artifacts should be loaded. By default, all previous artifacts are passed. Use an empty array to skip downloading artifacts.
   */
  dependencies?: string[];
  /**
   * Used to specify a list of files and directories that should be attached to the job if it succeeds. Artifacts are sent to Gitlab where they can be downloaded.
   */
  artifacts?: {
    /**
     * A list of paths to files/folders that should be included in the artifact.
     */
    paths?: string[];
    /**
     * Name for the archive created on job success. Can use variables in the name, e.g. '$CI_JOB_NAME'
     */
    name?: string;
    /**
     * Whether to add all untracked files (along with 'artifacts.paths') to the artifact.
     */
    untracked?: boolean;
    /**
     * Configure when artifacts are uploaded depended on job status.
     */
    when?: "on_success" | "on_failure" | "always";
    /**
     * How long artifacts should be kept. They are saved 30 days by default. Artifacts that have expired are removed periodically via cron job. Supports a wide variety of formats, e.g. '1 week', '3 mins 4 sec', '2 hrs 20 min', '2h20min', '6 mos 1 day', '47 yrs 6 mos and 4d', '3 weeks and 2 days'.
     */
    expire_in?: string;
    reports?: {
      /**
       * Path for file(s) that should be parsed as JUnit XML result
       */
      junit?: string | string[];
      [k: string]: any;
    };
  };
  /**
   * Used to associate environment metadata with a deploy. Environment can have a name and URL attached to it, and will be displayed under /environments under the project.
   */
  environment?: {
    /**
     * The name of the environment, e.g. 'qa', 'staging', 'production'.
     */
    name: string;
    /**
     * When set, this will expose buttons in various places for the current environment in Gitlab, that will take you to the defined URL.
     */
    url?: string;
    /**
     * The name of a job to execute when the environment is about to be stopped.
     */
    on_stop?: string;
    /**
     * Stops this environment so that it is inactive.
     */
    action?: "stop";
  };
  /**
   * Must be a regular expression, optionally but recommended to be quoted, and must be surrounded with '/'. Example: '/Code coverage: \d+\.\d+/'
   */
  coverage?: string;
  /**
   * The number of times the job will be retried if it fails. Defaults to 0 and can max be retried 2 times (3 times total).
   */
  retry?: number;
}
