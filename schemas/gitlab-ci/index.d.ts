/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the docker image to use for the job or globally for all jobs. Job configuration takes precedence over global setting. Requires a certain kind of Gitlab runner executor.
 */
export type Image =
  | string
  | {
      /**
       * Full name of the image that should be used. It should contain the Registry part if needed.
       */
      name: string;
      /**
       * Command or script that should be executed as the container's entrypoint. It will be translated to Docker's --entrypoint option while creating the container. The syntax is similar to Dockerfile's ENTRYPOINT directive, where each shell token is a separate string in the array.
       */
      entrypoint?: [any, ...(any)[]];
    };
/**
 * Similar to `image` property, but will link the specified services to the `image` container.
 */
export type Services = (
  | string
  | {
      /**
       * Full name of the image that should be used. It should contain the Registry part if needed.
       */
      name: string;
      /**
       * Command or script that should be executed as the container's entrypoint. It will be translated to Docker's --entrypoint option while creating the container. The syntax is similar to Dockerfile's ENTRYPOINT directive, where each shell token is a separate string in the array.
       */
      entrypoint?: [string, ...(string)[]];
      /**
       * Command or script that should be used as the container's command. It will be translated to arguments passed to Docker after the image's name. The syntax is similar to Dockerfile's CMD directive, where each shell token is a separate string in the array.
       */
      command?: [string, ...(string)[]];
      /**
       * Additional alias that can be used to access the service from the job's container. Read Accessing the services for more information.
       */
      alias?: string;
    })[];
/**
 * Defines scripts that should run *before* the job. Can be set globally or per job.
 */
export type BeforeScript = string[];
/**
 * Defines scripts that should run *after* the job. Can be set globally or per job.
 */
export type AfterScript = string[];
export type IncludeItem =
  | string
  | {
      /**
       * Relative path from local repository root (`/`) to the `yaml`/`yml` file template. The file must be on the same branch, and does not work across git submodules.
       */
      local: string;
    }
  | {
      /**
       * Path to the project, e.g. `group/project`, or `group/sub-group/project`.
       */
      project: string;
      /**
       * Branch/Tag/Commit-hash for the target project.
       */
      ref?: string;
      /**
       * Relative path from project root (`/`) to the `yaml`/`yml` file template.
       */
      file: string;
    }
  | {
      /**
       * Use a `.gitlab-ci.yml` template as a base, e.g. `Nodejs.gitlab-ci.yml`.
       */
      template: string;
    }
  | {
      /**
       * URL to a `yaml`/`yml` template file using HTTP/HTTPS.
       */
      remote: string;
    };
/**
 * This interface was referenced by `GitlabCIConfiguration`'s JSON-Schema definition
 * via the `patternProperty` "^[.]".
 */
export type JobTemplate =
  | {
      when: "delayed";
      [k: string]: any;
    }
  | {
      when?: {
        [k: string]: any;
      };
      [k: string]: any;
    };
export type Job = JobTemplate & {
  [k: string]: any;
};

/**
 * Gitlab has a built-in solution for doing CI called Gitlab CI. It is configured by supplying a file called `.gitlab-ci.yml`, which will list all the jobs that are going to run for the project. A full list of all options can be found at https://docs.gitlab.com/ee/ci/yaml/. You can read more about Gitlab CI at https://docs.gitlab.com/ee/ci/README.html.
 */
export interface GitlabCIConfiguration {
  $schema?: string;
  image?: Image;
  services?: Services;
  before_script?: BeforeScript;
  after_script?: AfterScript;
  variables?: Variables;
  cache?: Cache;
  default?: {
    image?: Image;
    services?: Services;
    before_script?: BeforeScript;
    after_script?: AfterScript;
    cache?: Cache;
    [k: string]: any;
  };
  /**
   * Groups jobs into stages. All jobs in one stage must complete before next stage is executed. Defaults to ['build', 'test', 'deploy'].
   */
  stages?: [string, ...(string)[]];
  /**
   * Can be `IncludeItem` or `IncludeItem[]`. Each `IncludeItem` will be a string, or an object with properties for the method if including external YAML file. The external content will be fetched, included and evaluated along the `.gitlab-ci.yml`.
   */
  include?: IncludeItem | IncludeItem[];
  /**
   * A special job used to upload static sites to Gitlab pages. Requires a `public/` directory with `artifacts.path` pointing to it.
   */
  pages?: JobTemplate & {
    [k: string]: any;
  };
  [k: string]: Job;
}
/**
 * Defines environment variables for specific jobs or globally. Job level property overrides global variables. If a job sets `variables: {}`, all global variables are turned off.
 */
export interface Variables {
  [k: string]: string | number;
}
/**
 * Specify files or directories to cache between jobs. Can be set globally or per job.
 */
export interface Cache {
  /**
   * List of files or paths to cache.
   */
  paths?: string[];
  /**
   * Unique cache ID, to allow e.g. specific branch or job cache. Environment variables can be used to set up unique keys (e.g. "$CI_COMMIT_REF_SLUG" for per branch cache).
   */
  key?: string;
  /**
   * Set to `true` to cache untracked files.
   */
  untracked?: boolean;
  /**
   * Determines the strategy for downloading and updating the cache.
   */
  policy?: "pull" | "push" | "pull-push";
}
