/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Static Analysis Results Format (SARIF) Version 2.0.0-csd.2.beta-2019-01-24 JSON Schema: a standard format for the output of static analysis tools.
 */
export interface StaticAnalysisResultsFormatSARIFVersion200Csd2Beta20190124JSONSchema {
  /**
   * The URI of the JSON schema corresponding to the version.
   */
  $schema?: string;
  /**
   * The SARIF format version of this log file.
   */
  version: "2.0.0-csd.2.beta.2019-01-24";
  /**
   * The set of runs contained in this log file.
   */
  runs: Run[];
  /**
   * Key/value pairs that provide additional information about the log file.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Describes a single run of an analysis tool, and contains the reported output of that run.
 */
export interface Run {
  /**
   * Information about the tool or tool pipeline that generated the results in this run. A run can only contain results produced by a single tool or tool pipeline. A run can aggregate results from multiple log files, as long as context around the tool run (tool command-line arguments and the like) is identical for all aggregated files.
   */
  tool: {
    /**
     * The tool language (expressed as an ISO 649 two-letter lowercase culture code) and region (expressed as an ISO 3166 two-letter uppercase subculture code associated with a country or region).
     */
    language?: string;
    /**
     * The analysis tool that was run.
     */
    driver: {
      /**
       * The name of the component.
       */
      name: string;
      /**
       * The name of the component along with its version and any other useful identifying information, such as its locale.
       */
      fullName?: string;
      /**
       * The component version, in whatever format the component natively provides.
       */
      version?: string;
      /**
       * The component version in the format specified by Semantic Versioning 2.0.
       */
      semanticVersion?: string;
      /**
       * The binary version of the component's primary executable file expressed as four non-negative integers separated by a period (for operating systems that express file versions in this way).
       */
      dottedQuadFileVersion?: string;
      /**
       * The absolute URI from which the component can be downloaded.
       */
      downloadUri?: string;
      /**
       * A dictionary, each of whose keys is a resource identifier and each of whose values is a multiformatMessageString object, which holds message strings in plain text and (optionally) Markdown format. The strings can include placeholders, which can be used to construct a message in combination with an arbitrary number of additional string arguments.
       */
      globalMessageStrings?: {
        [k: string]: MultiformatMessageString;
      };
      /**
       * An array of reportDescriptor objects relevant to the notifications related to the configuration and runtime execution of the component.
       */
      notificationDescriptors?: ReportingDescriptor[];
      /**
       * An array of reportDescriptor objects relevant to the analysis performed by the component.
       */
      ruleDescriptors?: ReportingDescriptor[];
      /**
       * The index within the run artifacts array of the artifact object associated with the component.
       */
      artifactIndex?: number;
      /**
       * Key/value pairs that provide additional information about the component.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Tool extensions that contributed to or reconfigured the analysis tool that was run.
     */
    extensions?: ToolComponent[];
    /**
     * Key/value pairs that provide additional information about the tool.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Describes the invocation of the analysis tool.
   */
  invocations?: Invocation[];
  /**
   * A conversion object that describes how a converter transformed an analysis tool's native reporting format into the SARIF format.
   */
  conversion?: {
    /**
     * A tool object that describes the converter.
     */
    tool: {
      /**
       * The tool language (expressed as an ISO 649 two-letter lowercase culture code) and region (expressed as an ISO 3166 two-letter uppercase subculture code associated with a country or region).
       */
      language?: string;
      /**
       * The analysis tool that was run.
       */
      driver: {
        /**
         * The name of the component.
         */
        name: string;
        /**
         * The name of the component along with its version and any other useful identifying information, such as its locale.
         */
        fullName?: string;
        /**
         * The component version, in whatever format the component natively provides.
         */
        version?: string;
        /**
         * The component version in the format specified by Semantic Versioning 2.0.
         */
        semanticVersion?: string;
        /**
         * The binary version of the component's primary executable file expressed as four non-negative integers separated by a period (for operating systems that express file versions in this way).
         */
        dottedQuadFileVersion?: string;
        /**
         * The absolute URI from which the component can be downloaded.
         */
        downloadUri?: string;
        /**
         * A dictionary, each of whose keys is a resource identifier and each of whose values is a multiformatMessageString object, which holds message strings in plain text and (optionally) Markdown format. The strings can include placeholders, which can be used to construct a message in combination with an arbitrary number of additional string arguments.
         */
        globalMessageStrings?: {
          [k: string]: MultiformatMessageString;
        };
        /**
         * An array of reportDescriptor objects relevant to the notifications related to the configuration and runtime execution of the component.
         */
        notificationDescriptors?: ReportingDescriptor[];
        /**
         * An array of reportDescriptor objects relevant to the analysis performed by the component.
         */
        ruleDescriptors?: ReportingDescriptor[];
        /**
         * The index within the run artifacts array of the artifact object associated with the component.
         */
        artifactIndex?: number;
        /**
         * Key/value pairs that provide additional information about the component.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Tool extensions that contributed to or reconfigured the analysis tool that was run.
       */
      extensions?: ToolComponent[];
      /**
       * Key/value pairs that provide additional information about the tool.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * An invocation object that describes the invocation of the converter.
     */
    invocation?: {
      /**
       * The command line used to invoke the tool.
       */
      commandLine?: string;
      /**
       * An array of strings, containing in order the command line arguments passed to the tool from the operating system.
       */
      arguments?: string[];
      /**
       * The locations of any response files specified on the tool's command line.
       */
      responseFiles?: ArtifactLocation[];
      /**
       * A set of artifacts relevant to the invocation of the tool.
       */
      attachments?: Attachment[];
      /**
       * The Coordinated Universal Time (UTC) date and time at which the run started. See "Date/time properties" in the SARIF spec for the required format.
       */
      startTimeUtc?: string;
      /**
       * The Coordinated Universal Time (UTC) date and time at which the run ended. See "Date/time properties" in the SARIF spec for the required format.
       */
      endTimeUtc?: string;
      /**
       * The process exit code.
       */
      exitCode?: number;
      /**
       * An array of reportingConfigurationOverride objects that describe runtime reporting behavior.
       */
      reportingConfigurationOverrides?: ReportingConfigurationOverride[];
      /**
       * A list of runtime conditions detected by the tool during the analysis.
       */
      toolNotifications?: Notification[];
      /**
       * A list of conditions detected by the tool that are relevant to the tool's configuration.
       */
      configurationNotifications?: Notification[];
      /**
       * The reason for the process exit.
       */
      exitCodeDescription?: string;
      /**
       * The name of the signal that caused the process to exit.
       */
      exitSignalName?: string;
      /**
       * The numeric value of the signal that caused the process to exit.
       */
      exitSignalNumber?: number;
      /**
       * The reason given by the operating system that the process failed to start.
       */
      processStartFailureMessage?: string;
      /**
       * A value indicating whether the tool's execution completed successfully.
       */
      toolExecutionSuccessful?: boolean;
      /**
       * The machine that hosted the analysis tool run.
       */
      machine?: string;
      /**
       * The account that ran the analysis tool.
       */
      account?: string;
      /**
       * The process id for the analysis tool run.
       */
      processId?: number;
      /**
       * An absolute URI specifying the location of the analysis tool's executable.
       */
      executableLocation?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * The working directory for the analysis tool run.
       */
      workingDirectory?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * The environment variables associated with the analysis tool process, expressed as key/value pairs.
       */
      environmentVariables?: {
        [k: string]: string;
      };
      /**
       * A file containing the standard input stream to the process that was invoked.
       */
      stdin?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A file containing the standard output stream from the process that was invoked.
       */
      stdout?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A file containing the standard error stream from the process that was invoked.
       */
      stderr?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A file containing the interleaved standard output and standard error stream from the process that was invoked.
       */
      stdoutStderr?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Key/value pairs that provide additional information about the invocation.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * The locations of the analysis tool's per-run log files.
     */
    analysisToolLogFiles?: ArtifactLocation[];
    /**
     * Key/value pairs that provide additional information about the conversion.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Specifies the revision in version control of the artifacts that were scanned.
   */
  versionControlProvenance?: VersionControlDetails[];
  /**
   * The artifact location specified by each uriBaseId symbol on the machine where the tool originally ran.
   */
  originalUriBaseIds?: {
    [k: string]: ArtifactLocation;
  };
  /**
   * An array of artifact objects relevant to the run.
   */
  artifacts?: Artifact[];
  /**
   * An array of logical locations such as namespaces, types or functions.
   */
  logicalLocations?: LogicalLocation[];
  /**
   * A dictionary, each of whose keys is the id of a graph and each of whose values is a 'graph' object with that id.
   */
  graphs?: {
    [k: string]: Graph;
  };
  /**
   * The set of results contained in an SARIF log. The results array can be omitted when a run is solely exporting rules metadata. It must be present (but may be empty) if a log file represents an actual scan.
   */
  results?: Result[];
  /**
   * Automation details that describe this run.
   */
  id?: {
    /**
     * A description of the identity and role played within the engineering system by this object's containing run object.
     */
    description?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A hierarchical string that uniquely identifies this object's containing run object.
     */
    instanceId?: string;
    /**
     * A stable, unique identifer for this object's containing run object in the form of a GUID.
     */
    instanceGuid?: string;
    /**
     * A stable, unique identifier for the equivalence class of runs to which this object's containing run object belongs in the form of a GUID.
     */
    correlationGuid?: string;
    /**
     * Key/value pairs that provide additional information about the run automation details.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Automation details that describe the aggregate of runs to which this run belongs.
   */
  aggregateIds?: RunAutomationDetails[];
  /**
   * The 'instanceGuid' property of a previous SARIF 'run' that comprises the baseline that was used to compute result 'baselineState' properties for the run.
   */
  baselineInstanceGuid?: string;
  /**
   * The MIME type of all Markdown text message properties in the run. Default: "text/markdown;variant=GFM"
   */
  markdownMessageMimeType?: string;
  /**
   * The string used to replace sensitive information in a redaction-aware property.
   */
  redactionToken?: string;
  /**
   * Specifies the default encoding for any artifact object that refers to a text file.
   */
  defaultFileEncoding?: string;
  /**
   * Specifies the default source language for any artifact object that refers to a text file that contains source code.
   */
  defaultSourceLanguage?: string;
  /**
   * An ordered list of character sequences that were treated as line breaks when computing region information for the run.
   */
  newlineSequences?: string[];
  /**
   * Specifies the unit in which the tool measures columns.
   */
  columnKind?: "utf16CodeUnits" | "unicodeCodePoints";
  /**
   * References to external property files that should be inlined with the content of a root log file.
   */
  externalPropertyFiles?: {
    /**
     * An external property file containing a run.conversion object to be merged with the root log file.
     */
    conversion?: {
      /**
       * The location of the external property file.
       */
      artifactLocation?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A stable, unique identifer for the external property file in the form of a GUID.
       */
      instanceGuid?: string;
      /**
       * A non-negative integer specifying the number of items contained in the external property file.
       */
      itemCount?: number;
      /**
       * Key/value pairs that provide additional information about the external property file.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * An external property file containing a run.graphs object to be merged with the root log file.
     */
    graphs?: {
      /**
       * The location of the external property file.
       */
      artifactLocation?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A stable, unique identifer for the external property file in the form of a GUID.
       */
      instanceGuid?: string;
      /**
       * A non-negative integer specifying the number of items contained in the external property file.
       */
      itemCount?: number;
      /**
       * Key/value pairs that provide additional information about the external property file.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * An external property file containing a run.properties object to be merged with the root log file.
     */
    externalizedProperties?: {
      /**
       * The location of the external property file.
       */
      artifactLocation?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A stable, unique identifer for the external property file in the form of a GUID.
       */
      instanceGuid?: string;
      /**
       * A non-negative integer specifying the number of items contained in the external property file.
       */
      itemCount?: number;
      /**
       * Key/value pairs that provide additional information about the external property file.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * An array of external property files containing run.artifacts arrays to be merged with the root log file.
     */
    artifacts?: ExternalPropertyFile[];
    /**
     * An array of external property files containing run.invocations arrays to be merged with the root log file.
     */
    invocations?: ExternalPropertyFile[];
    /**
     * An array of external property files containing run.logicalLocations arrays to be merged with the root log file.
     */
    logicalLocations?: ExternalPropertyFile[];
    /**
     * An array of external property files containing run.results arrays to be merged with the root log file.
     */
    results?: ExternalPropertyFile[];
    /**
     * An external property file containing a run.tool object to be merged with the root log file.
     */
    tool?: {
      /**
       * The location of the external property file.
       */
      artifactLocation?: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A stable, unique identifer for the external property file in the form of a GUID.
       */
      instanceGuid?: string;
      /**
       * A non-negative integer specifying the number of items contained in the external property file.
       */
      itemCount?: number;
      /**
       * Key/value pairs that provide additional information about the external property file.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the run.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A message string or message format string rendered in multiple formats.
 */
export interface MultiformatMessageString {
  /**
   * A plain text message string or format string.
   */
  text?: string;
  /**
   * A Markdown message string or format string.
   */
  markdown?: string;
  /**
   * Key/value pairs that provide additional information about the message.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Metadata that describes a specific report produced by the tool, as part of the analysis it provides or its runtime reporting.
 */
export interface ReportingDescriptor {
  /**
   * A stable, opaque identifier for the report.
   */
  id?: string;
  /**
   * An array of stable, opaque identifiers by which this report was known in some previous version of the analysis tool.
   */
  deprecatedIds?: string[];
  /**
   * A report identifier that is understandable to an end user.
   */
  name?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A concise description of the report. Should be a single sentence that is understandable when visible space is limited to a single line of text.
   */
  shortDescription?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A description of the report. Should, as far as possible, provide details sufficient to enable resolution of any problem indicated by the result.
   */
  fullDescription?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A set of name/value pairs with arbitrary names. Each value is a multiformatMessageString object, which holds message strings in plain text and (optionally) Markdown format. The strings can include placeholders, which can be used to construct a message in combination with an arbitrary number of additional string arguments.
   */
  messageStrings?: {
    [k: string]: MultiformatMessageString;
  };
  /**
   * Default reporting configuration information.
   */
  defaultConfiguration?: {
    /**
     * Specifies whether the report may be produced during the scan.
     */
    enabled?: boolean;
    /**
     * Specifies the failure level for the report.
     */
    level?: "none" | "note" | "warning" | "error";
    /**
     * Specifies the relative priority of the report. Used for analysis output only.
     */
    rank?: number;
    /**
     * Contains configuration information specific to a report.
     */
    parameters?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
    /**
     * Key/value pairs that provide additional information about the reporting configuration.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A URI where the primary documentation for the report can be found.
   */
  helpUri?: string;
  /**
   * Provides the primary documentation for the report, useful when there is no online documentation.
   */
  help?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the report.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A component, such as a plug-in or the default driver, of the analysis tool that was run.
 */
export interface ToolComponent {
  /**
   * The name of the component.
   */
  name: string;
  /**
   * The name of the component along with its version and any other useful identifying information, such as its locale.
   */
  fullName?: string;
  /**
   * The component version, in whatever format the component natively provides.
   */
  version?: string;
  /**
   * The component version in the format specified by Semantic Versioning 2.0.
   */
  semanticVersion?: string;
  /**
   * The binary version of the component's primary executable file expressed as four non-negative integers separated by a period (for operating systems that express file versions in this way).
   */
  dottedQuadFileVersion?: string;
  /**
   * The absolute URI from which the component can be downloaded.
   */
  downloadUri?: string;
  /**
   * A dictionary, each of whose keys is a resource identifier and each of whose values is a multiformatMessageString object, which holds message strings in plain text and (optionally) Markdown format. The strings can include placeholders, which can be used to construct a message in combination with an arbitrary number of additional string arguments.
   */
  globalMessageStrings?: {
    [k: string]: MultiformatMessageString;
  };
  /**
   * An array of reportDescriptor objects relevant to the notifications related to the configuration and runtime execution of the component.
   */
  notificationDescriptors?: ReportingDescriptor[];
  /**
   * An array of reportDescriptor objects relevant to the analysis performed by the component.
   */
  ruleDescriptors?: ReportingDescriptor[];
  /**
   * The index within the run artifacts array of the artifact object associated with the component.
   */
  artifactIndex?: number;
  /**
   * Key/value pairs that provide additional information about the component.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * The runtime environment of the analysis tool run.
 */
export interface Invocation {
  /**
   * The command line used to invoke the tool.
   */
  commandLine?: string;
  /**
   * An array of strings, containing in order the command line arguments passed to the tool from the operating system.
   */
  arguments?: string[];
  /**
   * The locations of any response files specified on the tool's command line.
   */
  responseFiles?: ArtifactLocation[];
  /**
   * A set of artifacts relevant to the invocation of the tool.
   */
  attachments?: Attachment[];
  /**
   * The Coordinated Universal Time (UTC) date and time at which the run started. See "Date/time properties" in the SARIF spec for the required format.
   */
  startTimeUtc?: string;
  /**
   * The Coordinated Universal Time (UTC) date and time at which the run ended. See "Date/time properties" in the SARIF spec for the required format.
   */
  endTimeUtc?: string;
  /**
   * The process exit code.
   */
  exitCode?: number;
  /**
   * An array of reportingConfigurationOverride objects that describe runtime reporting behavior.
   */
  reportingConfigurationOverrides?: ReportingConfigurationOverride[];
  /**
   * A list of runtime conditions detected by the tool during the analysis.
   */
  toolNotifications?: Notification[];
  /**
   * A list of conditions detected by the tool that are relevant to the tool's configuration.
   */
  configurationNotifications?: Notification[];
  /**
   * The reason for the process exit.
   */
  exitCodeDescription?: string;
  /**
   * The name of the signal that caused the process to exit.
   */
  exitSignalName?: string;
  /**
   * The numeric value of the signal that caused the process to exit.
   */
  exitSignalNumber?: number;
  /**
   * The reason given by the operating system that the process failed to start.
   */
  processStartFailureMessage?: string;
  /**
   * A value indicating whether the tool's execution completed successfully.
   */
  toolExecutionSuccessful?: boolean;
  /**
   * The machine that hosted the analysis tool run.
   */
  machine?: string;
  /**
   * The account that ran the analysis tool.
   */
  account?: string;
  /**
   * The process id for the analysis tool run.
   */
  processId?: number;
  /**
   * An absolute URI specifying the location of the analysis tool's executable.
   */
  executableLocation?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The working directory for the analysis tool run.
   */
  workingDirectory?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The environment variables associated with the analysis tool process, expressed as key/value pairs.
   */
  environmentVariables?: {
    [k: string]: string;
  };
  /**
   * A file containing the standard input stream to the process that was invoked.
   */
  stdin?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A file containing the standard output stream from the process that was invoked.
   */
  stdout?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A file containing the standard error stream from the process that was invoked.
   */
  stderr?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A file containing the interleaved standard output and standard error stream from the process that was invoked.
   */
  stdoutStderr?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the invocation.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Specifies the location of an artifact.
 */
export interface ArtifactLocation {
  /**
   * A string containing a valid relative or absolute URI.
   */
  uri: string;
  /**
   * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
   */
  uriBaseId?: string;
  /**
   * The index within the run artifacts array of the artifact object associated with the artifact location.
   */
  index?: number;
  /**
   * Key/value pairs that provide additional information about the artifact location.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * An artifact relevant to a tool invocation or to a result.
 */
export interface Attachment {
  /**
   * A message describing the role played by the attachment.
   */
  description?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The location of the attachment.
   */
  artifactLocation: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of regions of interest within the attachment.
   */
  regions?: Region[];
  /**
   * An array of rectangles specifying areas of interest within the image.
   */
  rectangles?: Rectangle[];
  /**
   * Key/value pairs that provide additional information about the attachment.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A region within an artifact where a result was detected.
 */
export interface Region {
  /**
   * The line number of the first character in the region.
   */
  startLine?: number;
  /**
   * The column number of the first character in the region.
   */
  startColumn?: number;
  /**
   * The line number of the last character in the region.
   */
  endLine?: number;
  /**
   * The column number of the character following the end of the region.
   */
  endColumn?: number;
  /**
   * The zero-based offset from the beginning of the artifact of the first character in the region.
   */
  charOffset?: number;
  /**
   * The length of the region in characters.
   */
  charLength?: number;
  /**
   * The zero-based offset from the beginning of the artifact of the first byte in the region.
   */
  byteOffset?: number;
  /**
   * The length of the region in bytes.
   */
  byteLength?: number;
  /**
   * The portion of the artifact contents within the specified region.
   */
  snippet?: {
    /**
     * UTF-8-encoded content from a text artifact.
     */
    text?: string;
    /**
     * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
     */
    binary?: string;
    /**
     * Key/value pairs that provide additional information about the artifact content.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A message relevant to the region.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Specifies the source language, if any, of the portion of the artifact specified by the region object.
   */
  sourceLanguage?: string;
  /**
   * Key/value pairs that provide additional information about the region.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * An area within an image.
 */
export interface Rectangle {
  /**
   * The Y coordinate of the top edge of the rectangle, measured in the image's natural units.
   */
  top?: number;
  /**
   * The X coordinate of the left edge of the rectangle, measured in the image's natural units.
   */
  left?: number;
  /**
   * The Y coordinate of the bottom edge of the rectangle, measured in the image's natural units.
   */
  bottom?: number;
  /**
   * The X coordinate of the right edge of the rectangle, measured in the image's natural units.
   */
  right?: number;
  /**
   * A message relevant to the rectangle.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the rectangle.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Information about how a specific tool report was reconfigured at runtime.
 */
export interface ReportingConfigurationOverride {
  /**
   * Specifies how the report was configured during the scan.
   */
  configuration?: {
    /**
     * Specifies whether the report may be produced during the scan.
     */
    enabled?: boolean;
    /**
     * Specifies the failure level for the report.
     */
    level?: "none" | "note" | "warning" | "error";
    /**
     * Specifies the relative priority of the report. Used for analysis output only.
     */
    rank?: number;
    /**
     * Contains configuration information specific to a report.
     */
    parameters?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
    /**
     * Key/value pairs that provide additional information about the reporting configuration.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The index within the toolComponent.notificationDescriptors array of the reportingDescriptor associated with this override.
   */
  notificationIndex?: number;
  /**
   * The index within the toolComponent.ruleDescriptors array of the reportingDescriptor associated with this override.
   */
  ruleIndex?: number;
  /**
   * The index within the run.tool.extensions array of the toolComponent object which describes the plug-in or tool extension that produced the report.
   */
  extensionIndex?: number;
  /**
   * Key/value pairs that provide additional information about the reporting configuration.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Describes a condition relevant to the tool itself, as opposed to being relevant to a target being analyzed by the tool.
 */
export interface Notification {
  /**
   * An identifier for the condition that was encountered.
   */
  id?: string;
  /**
   * The stable, unique identifier of the rule, if any, to which this notification is relevant.
   */
  ruleId?: string;
  /**
   * The index within the run resources array of the rule object, if any, associated with this notification.
   */
  ruleIndex?: number;
  /**
   * The artifact and region relevant to this notification.
   */
  physicalLocation?: {
    /**
     * Value that distinguishes this physical location from all other physical locations in this run object.
     */
    id?: number;
    /**
     * The location of the artifact.
     */
    artifactLocation: {
      /**
       * A string containing a valid relative or absolute URI.
       */
      uri: string;
      /**
       * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
       */
      uriBaseId?: string;
      /**
       * The index within the run artifacts array of the artifact object associated with the artifact location.
       */
      index?: number;
      /**
       * Key/value pairs that provide additional information about the artifact location.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies a portion of the artifact.
     */
    region?: {
      /**
       * The line number of the first character in the region.
       */
      startLine?: number;
      /**
       * The column number of the first character in the region.
       */
      startColumn?: number;
      /**
       * The line number of the last character in the region.
       */
      endLine?: number;
      /**
       * The column number of the character following the end of the region.
       */
      endColumn?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first character in the region.
       */
      charOffset?: number;
      /**
       * The length of the region in characters.
       */
      charLength?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first byte in the region.
       */
      byteOffset?: number;
      /**
       * The length of the region in bytes.
       */
      byteLength?: number;
      /**
       * The portion of the artifact contents within the specified region.
       */
      snippet?: {
        /**
         * UTF-8-encoded content from a text artifact.
         */
        text?: string;
        /**
         * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
         */
        binary?: string;
        /**
         * Key/value pairs that provide additional information about the artifact content.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A message relevant to the region.
       */
      message?: {
        /**
         * A plain text message string.
         */
        text?: string;
        /**
         * A Markdown message string.
         */
        markdown?: string;
        /**
         * The resource id for a plain text or Markdown message string.
         */
        messageId?: string;
        /**
         * An array of strings to substitute into the message string.
         */
        arguments?: string[];
        /**
         * Key/value pairs that provide additional information about the message.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies the source language, if any, of the portion of the artifact specified by the region object.
       */
      sourceLanguage?: string;
      /**
       * Key/value pairs that provide additional information about the region.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies a portion of the artifact that encloses the region. Allows a viewer to display additional context around the region.
     */
    contextRegion?: {
      /**
       * The line number of the first character in the region.
       */
      startLine?: number;
      /**
       * The column number of the first character in the region.
       */
      startColumn?: number;
      /**
       * The line number of the last character in the region.
       */
      endLine?: number;
      /**
       * The column number of the character following the end of the region.
       */
      endColumn?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first character in the region.
       */
      charOffset?: number;
      /**
       * The length of the region in characters.
       */
      charLength?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first byte in the region.
       */
      byteOffset?: number;
      /**
       * The length of the region in bytes.
       */
      byteLength?: number;
      /**
       * The portion of the artifact contents within the specified region.
       */
      snippet?: {
        /**
         * UTF-8-encoded content from a text artifact.
         */
        text?: string;
        /**
         * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
         */
        binary?: string;
        /**
         * Key/value pairs that provide additional information about the artifact content.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A message relevant to the region.
       */
      message?: {
        /**
         * A plain text message string.
         */
        text?: string;
        /**
         * A Markdown message string.
         */
        markdown?: string;
        /**
         * The resource id for a plain text or Markdown message string.
         */
        messageId?: string;
        /**
         * An array of strings to substitute into the message string.
         */
        arguments?: string[];
        /**
         * Key/value pairs that provide additional information about the message.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies the source language, if any, of the portion of the artifact specified by the region object.
       */
      sourceLanguage?: string;
      /**
       * Key/value pairs that provide additional information about the region.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Key/value pairs that provide additional information about the physical location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A message that describes the condition that was encountered.
   */
  message: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A value specifying the severity level of the notification.
   */
  level?: "none" | "note" | "warning" | "error";
  /**
   * The thread identifier of the code that generated the notification.
   */
  threadId?: number;
  /**
   * The Coordinated Universal Time (UTC) date and time at which the analysis tool generated the notification.
   */
  timeUtc?: string;
  /**
   * The runtime exception, if any, relevant to this notification.
   */
  exception?: {
    /**
     * A string that identifies the kind of exception, for example, the fully qualified type name of an object that was thrown, or the symbolic name of a signal.
     */
    kind?: string;
    /**
     * A message that describes the exception.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * The sequence of function calls leading to the exception.
     */
    stack?: {
      /**
       * A message relevant to this call stack.
       */
      message?: {
        /**
         * A plain text message string.
         */
        text?: string;
        /**
         * A Markdown message string.
         */
        markdown?: string;
        /**
         * The resource id for a plain text or Markdown message string.
         */
        messageId?: string;
        /**
         * An array of strings to substitute into the message string.
         */
        arguments?: string[];
        /**
         * Key/value pairs that provide additional information about the message.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * An array of stack frames that represents a sequence of calls, rendered in reverse chronological order, that comprise the call stack.
       */
      frames: StackFrame[];
      /**
       * Key/value pairs that provide additional information about the stack.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * An array of exception objects each of which is considered a cause of this exception.
     */
    innerExceptions?: Exception[];
    /**
     * Key/value pairs that provide additional information about the exception.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
    [k: string]: any;
  };
  /**
   * Key/value pairs that provide additional information about the notification.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A function call within a stack trace.
 */
export interface StackFrame {
  /**
   * The location to which this stack frame refers.
   */
  location?: {
    /**
     * Identifies the artifact and region.
     */
    physicalLocation?: {
      /**
       * Value that distinguishes this physical location from all other physical locations in this run object.
       */
      id?: number;
      /**
       * The location of the artifact.
       */
      artifactLocation: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies a portion of the artifact.
       */
      region?: {
        /**
         * The line number of the first character in the region.
         */
        startLine?: number;
        /**
         * The column number of the first character in the region.
         */
        startColumn?: number;
        /**
         * The line number of the last character in the region.
         */
        endLine?: number;
        /**
         * The column number of the character following the end of the region.
         */
        endColumn?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first character in the region.
         */
        charOffset?: number;
        /**
         * The length of the region in characters.
         */
        charLength?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first byte in the region.
         */
        byteOffset?: number;
        /**
         * The length of the region in bytes.
         */
        byteLength?: number;
        /**
         * The portion of the artifact contents within the specified region.
         */
        snippet?: {
          /**
           * UTF-8-encoded content from a text artifact.
           */
          text?: string;
          /**
           * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
           */
          binary?: string;
          /**
           * Key/value pairs that provide additional information about the artifact content.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * A message relevant to the region.
         */
        message?: {
          /**
           * A plain text message string.
           */
          text?: string;
          /**
           * A Markdown message string.
           */
          markdown?: string;
          /**
           * The resource id for a plain text or Markdown message string.
           */
          messageId?: string;
          /**
           * An array of strings to substitute into the message string.
           */
          arguments?: string[];
          /**
           * Key/value pairs that provide additional information about the message.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * Specifies the source language, if any, of the portion of the artifact specified by the region object.
         */
        sourceLanguage?: string;
        /**
         * Key/value pairs that provide additional information about the region.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies a portion of the artifact that encloses the region. Allows a viewer to display additional context around the region.
       */
      contextRegion?: {
        /**
         * The line number of the first character in the region.
         */
        startLine?: number;
        /**
         * The column number of the first character in the region.
         */
        startColumn?: number;
        /**
         * The line number of the last character in the region.
         */
        endLine?: number;
        /**
         * The column number of the character following the end of the region.
         */
        endColumn?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first character in the region.
         */
        charOffset?: number;
        /**
         * The length of the region in characters.
         */
        charLength?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first byte in the region.
         */
        byteOffset?: number;
        /**
         * The length of the region in bytes.
         */
        byteLength?: number;
        /**
         * The portion of the artifact contents within the specified region.
         */
        snippet?: {
          /**
           * UTF-8-encoded content from a text artifact.
           */
          text?: string;
          /**
           * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
           */
          binary?: string;
          /**
           * Key/value pairs that provide additional information about the artifact content.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * A message relevant to the region.
         */
        message?: {
          /**
           * A plain text message string.
           */
          text?: string;
          /**
           * A Markdown message string.
           */
          markdown?: string;
          /**
           * The resource id for a plain text or Markdown message string.
           */
          messageId?: string;
          /**
           * An array of strings to substitute into the message string.
           */
          arguments?: string[];
          /**
           * Key/value pairs that provide additional information about the message.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * Specifies the source language, if any, of the portion of the artifact specified by the region object.
         */
        sourceLanguage?: string;
        /**
         * Key/value pairs that provide additional information about the region.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Key/value pairs that provide additional information about the physical location.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * The human-readable fully qualified name of the logical location. If run.logicalLocations is present, this value matches a property name within that object, from which further information about the logical location can be obtained.
     */
    fullyQualifiedLogicalName?: string;
    /**
     * The index within the logical locations array of the logical location associated with the result.
     */
    logicalLocationIndex?: number;
    /**
     * A message relevant to the location.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A set of regions relevant to the location.
     */
    annotations?: Region[];
    /**
     * Key/value pairs that provide additional information about the location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The name of the module that contains the code of this stack frame.
   */
  module?: string;
  /**
   * The thread identifier of the stack frame.
   */
  threadId?: number;
  /**
   * The address of the method or function that is executing.
   */
  address?: number;
  /**
   * The offset from the method or function that is executing.
   */
  offset?: number;
  /**
   * The parameters of the call that is executing.
   */
  parameters?: string[];
  /**
   * Key/value pairs that provide additional information about the stack frame.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
export interface Exception {
  /**
   * A string that identifies the kind of exception, for example, the fully qualified type name of an object that was thrown, or the symbolic name of a signal.
   */
  kind?: string;
  /**
   * A message that describes the exception.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The sequence of function calls leading to the exception.
   */
  stack?: {
    /**
     * A message relevant to this call stack.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * An array of stack frames that represents a sequence of calls, rendered in reverse chronological order, that comprise the call stack.
     */
    frames: StackFrame[];
    /**
     * Key/value pairs that provide additional information about the stack.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of exception objects each of which is considered a cause of this exception.
   */
  innerExceptions?: Exception[];
  /**
   * Key/value pairs that provide additional information about the exception.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * Specifies the information necessary to retrieve a desired revision from a version control system.
 */
export interface VersionControlDetails {
  /**
   * The absolute URI of the repository.
   */
  repositoryUri: string;
  /**
   * A string that uniquely and permanently identifies the revision within the repository.
   */
  revisionId?: string;
  /**
   * The name of a branch containing the revision.
   */
  branch?: string;
  /**
   * A tag that has been applied to the revision.
   */
  revisionTag?: string;
  /**
   * A Coordinated Universal Time (UTC) date and time that can be used to synchronize an enlistment to the state of the repository at that time.
   */
  asOfTimeUtc?: string;
  /**
   * The location in the local file system to which the root of the repository was mapped at the time of the analysis.
   */
  mappedTo?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the version control details.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A single artifact. In some cases, this artifact might be nested within another artifact.
 */
export interface Artifact {
  /**
   * The location of the artifact.
   */
  location?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Identifies the index of the immediate parent of the artifact, if this artifact is nested.
   */
  parentIndex?: number;
  /**
   * The offset in bytes of the artifact within its containing artifact.
   */
  offset?: number;
  /**
   * The length of the artifact in bytes.
   */
  length?: number;
  /**
   * The role or roles played by the artifact in the analysis.
   */
  roles?: (
    | "analysisTarget"
    | "toolComponent"
    | "attachment"
    | "responseFile"
    | "resultFile"
    | "standardStream"
    | "traceFile"
    | "unmodifiedFile"
    | "modifiedFile"
    | "addedFile"
    | "deletedFile"
    | "renamedFile"
    | "uncontrolledFile")[];
  /**
   * The MIME type (RFC 2045) of the artifact.
   */
  mimeType?: string;
  /**
   * The contents of the artifact.
   */
  contents?: {
    /**
     * UTF-8-encoded content from a text artifact.
     */
    text?: string;
    /**
     * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
     */
    binary?: string;
    /**
     * Key/value pairs that provide additional information about the artifact content.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Specifies the encoding for an artifact object that refers to a text file.
   */
  encoding?: string;
  /**
   * Specifies the source language for any artifact object that refers to a text file that contains source code.
   */
  sourceLanguage?: string;
  /**
   * A dictionary, each of whose keys is the name of a hash function and each of whose values is the hashed value of the artifact produced by the specified hash function.
   */
  hashes?: {
    [k: string]: string;
  };
  /**
   * The Coordinated Universal Time (UTC) date and time at which the artifact was most recently modified. See "Date/time properties" in the SARIF spec for the required format.
   */
  lastModifiedTimeUtc?: string;
  /**
   * Key/value pairs that provide additional information about the artifact.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A logical location of a construct that produced a result.
 */
export interface LogicalLocation {
  /**
   * Identifies the construct in which the result occurred. For example, this property might contain the name of a class or a method.
   */
  name?: string;
  /**
   * The human-readable fully qualified name of the logical location.
   */
  fullyQualifiedName?: string;
  /**
   * The machine-readable name for the logical location, such as a mangled function name provided by a C++ compiler that encodes calling convention, return type and other details along with the function name.
   */
  decoratedName?: string;
  /**
   * Identifies the index of the immediate parent of the construct in which the result was detected. For example, this property might point to a logical location that represents the namespace that holds a type.
   */
  parentIndex?: number;
  /**
   * The type of construct this logical location component refers to. Should be one of 'function', 'member', 'module', 'namespace', 'parameter', 'resource', 'returnType', 'type', or 'variable', if any of those accurately describe the construct.
   */
  kind?: string;
  /**
   * Key/value pairs that provide additional information about the logical location.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A network of nodes and directed edges that describes some aspect of the structure of the code (for example, a call graph).
 */
export interface Graph {
  /**
   * A string that uniquely identifies the graph within a run.graphs or result.graphs array.
   */
  id: string;
  /**
   * A description of the graph.
   */
  description?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of node objects representing the nodes of the graph.
   */
  nodes?: Node[];
  /**
   * An array of edge objects representing the edges of the graph.
   */
  edges?: Edge[];
  /**
   * Key/value pairs that provide additional information about the graph.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Represents a node in a graph.
 */
export interface Node {
  /**
   * A string that uniquely identifies the node within its graph.
   */
  id: string;
  /**
   * A short description of the node.
   */
  label?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A code location associated with the node.
   */
  location?: {
    /**
     * Identifies the artifact and region.
     */
    physicalLocation?: {
      /**
       * Value that distinguishes this physical location from all other physical locations in this run object.
       */
      id?: number;
      /**
       * The location of the artifact.
       */
      artifactLocation: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies a portion of the artifact.
       */
      region?: {
        /**
         * The line number of the first character in the region.
         */
        startLine?: number;
        /**
         * The column number of the first character in the region.
         */
        startColumn?: number;
        /**
         * The line number of the last character in the region.
         */
        endLine?: number;
        /**
         * The column number of the character following the end of the region.
         */
        endColumn?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first character in the region.
         */
        charOffset?: number;
        /**
         * The length of the region in characters.
         */
        charLength?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first byte in the region.
         */
        byteOffset?: number;
        /**
         * The length of the region in bytes.
         */
        byteLength?: number;
        /**
         * The portion of the artifact contents within the specified region.
         */
        snippet?: {
          /**
           * UTF-8-encoded content from a text artifact.
           */
          text?: string;
          /**
           * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
           */
          binary?: string;
          /**
           * Key/value pairs that provide additional information about the artifact content.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * A message relevant to the region.
         */
        message?: {
          /**
           * A plain text message string.
           */
          text?: string;
          /**
           * A Markdown message string.
           */
          markdown?: string;
          /**
           * The resource id for a plain text or Markdown message string.
           */
          messageId?: string;
          /**
           * An array of strings to substitute into the message string.
           */
          arguments?: string[];
          /**
           * Key/value pairs that provide additional information about the message.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * Specifies the source language, if any, of the portion of the artifact specified by the region object.
         */
        sourceLanguage?: string;
        /**
         * Key/value pairs that provide additional information about the region.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies a portion of the artifact that encloses the region. Allows a viewer to display additional context around the region.
       */
      contextRegion?: {
        /**
         * The line number of the first character in the region.
         */
        startLine?: number;
        /**
         * The column number of the first character in the region.
         */
        startColumn?: number;
        /**
         * The line number of the last character in the region.
         */
        endLine?: number;
        /**
         * The column number of the character following the end of the region.
         */
        endColumn?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first character in the region.
         */
        charOffset?: number;
        /**
         * The length of the region in characters.
         */
        charLength?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first byte in the region.
         */
        byteOffset?: number;
        /**
         * The length of the region in bytes.
         */
        byteLength?: number;
        /**
         * The portion of the artifact contents within the specified region.
         */
        snippet?: {
          /**
           * UTF-8-encoded content from a text artifact.
           */
          text?: string;
          /**
           * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
           */
          binary?: string;
          /**
           * Key/value pairs that provide additional information about the artifact content.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * A message relevant to the region.
         */
        message?: {
          /**
           * A plain text message string.
           */
          text?: string;
          /**
           * A Markdown message string.
           */
          markdown?: string;
          /**
           * The resource id for a plain text or Markdown message string.
           */
          messageId?: string;
          /**
           * An array of strings to substitute into the message string.
           */
          arguments?: string[];
          /**
           * Key/value pairs that provide additional information about the message.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * Specifies the source language, if any, of the portion of the artifact specified by the region object.
         */
        sourceLanguage?: string;
        /**
         * Key/value pairs that provide additional information about the region.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Key/value pairs that provide additional information about the physical location.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * The human-readable fully qualified name of the logical location. If run.logicalLocations is present, this value matches a property name within that object, from which further information about the logical location can be obtained.
     */
    fullyQualifiedLogicalName?: string;
    /**
     * The index within the logical locations array of the logical location associated with the result.
     */
    logicalLocationIndex?: number;
    /**
     * A message relevant to the location.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A set of regions relevant to the location.
     */
    annotations?: Region[];
    /**
     * Key/value pairs that provide additional information about the location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Array of child nodes.
   */
  children?: Node[];
  /**
   * Key/value pairs that provide additional information about the node.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Represents a directed edge in a graph.
 */
export interface Edge {
  /**
   * A string that uniquely identifies the edge within its graph.
   */
  id: string;
  /**
   * A short description of the edge.
   */
  label?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Identifies the source node (the node at which the edge starts).
   */
  sourceNodeId: string;
  /**
   * Identifies the target node (the node at which the edge ends).
   */
  targetNodeId: string;
  /**
   * Key/value pairs that provide additional information about the edge.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A result produced by an analysis tool.
 */
export interface Result {
  /**
   * The stable, unique identifier of the rule, if any, to which this notification is relevant. This member can be used to retrieve rule metadata from the rules dictionary, if it exists.
   */
  ruleId?: string;
  /**
   * The index within the run resources array of the rule object associated with this result.
   */
  ruleIndex?: number;
  /**
   * The index within the run.tool.extensions array of the tool component object which describes the plug-in or tool extension that produced the result.
   */
  ruleExtensionIndex?: number;
  /**
   * A value that categorizes results by evaluation state.
   */
  kind?: "notApplicable" | "pass" | "fail" | "review" | "open";
  /**
   * A value specifying the severity level of the result.
   */
  level?: "none" | "note" | "warning" | "error";
  /**
   * A message that describes the result. The first sentence of the message only will be displayed when visible space is limited.
   */
  message: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Identifies the artifact that the analysis tool was instructed to scan. This need not be the same as the artifact where the result actually occurred.
   */
  analysisTarget?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The set of locations where the result was detected. Specify only one location unless the problem indicated by the result can only be corrected by making a change at every specified location.
   */
  locations?: Location[];
  /**
   * A stable, unique identifer for the result in the form of a GUID.
   */
  instanceGuid?: string;
  /**
   * A stable, unique identifier for the equivalence class of logically identical results to which this result belongs, in the form of a GUID.
   */
  correlationGuid?: string;
  /**
   * A positive integer specifying the number of times this logically unique result was observed in this run.
   */
  occurrenceCount?: number;
  /**
   * A set of strings that contribute to the stable, unique identity of the result.
   */
  partialFingerprints?: {
    [k: string]: string;
  };
  /**
   * A set of strings each of which individually defines a stable, unique identity for the result.
   */
  fingerprints?: {
    [k: string]: string;
  };
  /**
   * An array of 'stack' objects relevant to the result.
   */
  stacks?: Stack[];
  /**
   * An array of 'codeFlow' objects relevant to the result.
   */
  codeFlows?: CodeFlow[];
  /**
   * A dictionary, each of whose keys is the id of a graph and each of whose values is a 'graph' object with that id.
   */
  graphs?: {
    [k: string]: Graph;
  };
  /**
   * An array of one or more unique 'graphTraversal' objects.
   */
  graphTraversals?: GraphTraversal[];
  /**
   * A set of locations relevant to this result.
   */
  relatedLocations?: Location[];
  /**
   * A set of flags indicating one or more suppression conditions.
   */
  suppressionStates?: ("suppressedInSource" | "suppressedExternally")[];
  /**
   * The state of a result relative to a baseline of a previous run.
   */
  baselineState?: "new" | "unchanged" | "updated" | "absent";
  /**
   * A number representing the priority or importance of the result.
   */
  rank?: number;
  /**
   * A set of artifacts relevant to the result.
   */
  attachments?: Attachment[];
  /**
   * An absolute URI at which the result can be viewed.
   */
  hostedViewerUri?: string;
  /**
   * The URIs of the work items associated with this result.
   */
  workItemUris?: string[];
  /**
   * Information about how and when the result was detected.
   */
  provenance?: {
    /**
     * The Coordinated Universal Time (UTC) date and time at which the result was first detected. See "Date/time properties" in the SARIF spec for the required format.
     */
    firstDetectionTimeUtc?: string;
    /**
     * The Coordinated Universal Time (UTC) date and time at which the result was most recently detected. See "Date/time properties" in the SARIF spec for the required format.
     */
    lastDetectionTimeUtc?: string;
    /**
     * A GUID-valued string equal to the id.instanceGuid property of the run in which the result was first detected.
     */
    firstDetectionRunInstanceGuid?: string;
    /**
     * A GUID-valued string equal to the id.instanceGuid property of the run in which the result was most recently detected.
     */
    lastDetectionRunInstanceGuid?: string;
    /**
     * The index within the run.invocations array of the invocation object which describes the tool invocation that detected the result.
     */
    invocationIndex?: number;
    /**
     * An array of physicalLocation objects which specify the portions of an analysis tool's output that a converter transformed into the result.
     */
    conversionSources?: PhysicalLocation[];
    /**
     * Key/value pairs that provide additional information about the result.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of 'fix' objects, each of which represents a proposed fix to the problem indicated by the result.
   */
  fixes?: Fix[];
  /**
   * Key/value pairs that provide additional information about the result.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A location within a programming artifact.
 */
export interface Location {
  /**
   * Identifies the artifact and region.
   */
  physicalLocation?: {
    /**
     * Value that distinguishes this physical location from all other physical locations in this run object.
     */
    id?: number;
    /**
     * The location of the artifact.
     */
    artifactLocation: {
      /**
       * A string containing a valid relative or absolute URI.
       */
      uri: string;
      /**
       * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
       */
      uriBaseId?: string;
      /**
       * The index within the run artifacts array of the artifact object associated with the artifact location.
       */
      index?: number;
      /**
       * Key/value pairs that provide additional information about the artifact location.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies a portion of the artifact.
     */
    region?: {
      /**
       * The line number of the first character in the region.
       */
      startLine?: number;
      /**
       * The column number of the first character in the region.
       */
      startColumn?: number;
      /**
       * The line number of the last character in the region.
       */
      endLine?: number;
      /**
       * The column number of the character following the end of the region.
       */
      endColumn?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first character in the region.
       */
      charOffset?: number;
      /**
       * The length of the region in characters.
       */
      charLength?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first byte in the region.
       */
      byteOffset?: number;
      /**
       * The length of the region in bytes.
       */
      byteLength?: number;
      /**
       * The portion of the artifact contents within the specified region.
       */
      snippet?: {
        /**
         * UTF-8-encoded content from a text artifact.
         */
        text?: string;
        /**
         * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
         */
        binary?: string;
        /**
         * Key/value pairs that provide additional information about the artifact content.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A message relevant to the region.
       */
      message?: {
        /**
         * A plain text message string.
         */
        text?: string;
        /**
         * A Markdown message string.
         */
        markdown?: string;
        /**
         * The resource id for a plain text or Markdown message string.
         */
        messageId?: string;
        /**
         * An array of strings to substitute into the message string.
         */
        arguments?: string[];
        /**
         * Key/value pairs that provide additional information about the message.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies the source language, if any, of the portion of the artifact specified by the region object.
       */
      sourceLanguage?: string;
      /**
       * Key/value pairs that provide additional information about the region.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies a portion of the artifact that encloses the region. Allows a viewer to display additional context around the region.
     */
    contextRegion?: {
      /**
       * The line number of the first character in the region.
       */
      startLine?: number;
      /**
       * The column number of the first character in the region.
       */
      startColumn?: number;
      /**
       * The line number of the last character in the region.
       */
      endLine?: number;
      /**
       * The column number of the character following the end of the region.
       */
      endColumn?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first character in the region.
       */
      charOffset?: number;
      /**
       * The length of the region in characters.
       */
      charLength?: number;
      /**
       * The zero-based offset from the beginning of the artifact of the first byte in the region.
       */
      byteOffset?: number;
      /**
       * The length of the region in bytes.
       */
      byteLength?: number;
      /**
       * The portion of the artifact contents within the specified region.
       */
      snippet?: {
        /**
         * UTF-8-encoded content from a text artifact.
         */
        text?: string;
        /**
         * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
         */
        binary?: string;
        /**
         * Key/value pairs that provide additional information about the artifact content.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * A message relevant to the region.
       */
      message?: {
        /**
         * A plain text message string.
         */
        text?: string;
        /**
         * A Markdown message string.
         */
        markdown?: string;
        /**
         * The resource id for a plain text or Markdown message string.
         */
        messageId?: string;
        /**
         * An array of strings to substitute into the message string.
         */
        arguments?: string[];
        /**
         * Key/value pairs that provide additional information about the message.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies the source language, if any, of the portion of the artifact specified by the region object.
       */
      sourceLanguage?: string;
      /**
       * Key/value pairs that provide additional information about the region.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Key/value pairs that provide additional information about the physical location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The human-readable fully qualified name of the logical location. If run.logicalLocations is present, this value matches a property name within that object, from which further information about the logical location can be obtained.
   */
  fullyQualifiedLogicalName?: string;
  /**
   * The index within the logical locations array of the logical location associated with the result.
   */
  logicalLocationIndex?: number;
  /**
   * A message relevant to the location.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A set of regions relevant to the location.
   */
  annotations?: Region[];
  /**
   * Key/value pairs that provide additional information about the location.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A call stack that is relevant to a result.
 */
export interface Stack {
  /**
   * A message relevant to this call stack.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of stack frames that represents a sequence of calls, rendered in reverse chronological order, that comprise the call stack.
   */
  frames: StackFrame[];
  /**
   * Key/value pairs that provide additional information about the stack.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A set of threadFlows which together describe a pattern of code execution relevant to detecting a result.
 */
export interface CodeFlow {
  /**
   * A message relevant to the code flow.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of one or more unique threadFlow objects, each of which describes the progress of a program through a thread of execution.
   */
  threadFlows: ThreadFlow[];
  /**
   * Key/value pairs that provide additional information about the code flow.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
export interface ThreadFlow {
  /**
   * An string that uniquely identifies the threadFlow within the codeFlow in which it occurs.
   */
  id?: string;
  /**
   * A message relevant to the thread flow.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A temporally ordered array of 'threadFlowLocation' objects, each of which describes a location visited by the tool while producing the result.
   */
  locations: ThreadFlowLocation[];
  /**
   * Key/value pairs that provide additional information about the thread flow.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * A location visited by an analysis tool while simulating or monitoring the execution of a program.
 */
export interface ThreadFlowLocation {
  /**
   * The code location.
   */
  location?: {
    /**
     * Identifies the artifact and region.
     */
    physicalLocation?: {
      /**
       * Value that distinguishes this physical location from all other physical locations in this run object.
       */
      id?: number;
      /**
       * The location of the artifact.
       */
      artifactLocation: {
        /**
         * A string containing a valid relative or absolute URI.
         */
        uri: string;
        /**
         * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
         */
        uriBaseId?: string;
        /**
         * The index within the run artifacts array of the artifact object associated with the artifact location.
         */
        index?: number;
        /**
         * Key/value pairs that provide additional information about the artifact location.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies a portion of the artifact.
       */
      region?: {
        /**
         * The line number of the first character in the region.
         */
        startLine?: number;
        /**
         * The column number of the first character in the region.
         */
        startColumn?: number;
        /**
         * The line number of the last character in the region.
         */
        endLine?: number;
        /**
         * The column number of the character following the end of the region.
         */
        endColumn?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first character in the region.
         */
        charOffset?: number;
        /**
         * The length of the region in characters.
         */
        charLength?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first byte in the region.
         */
        byteOffset?: number;
        /**
         * The length of the region in bytes.
         */
        byteLength?: number;
        /**
         * The portion of the artifact contents within the specified region.
         */
        snippet?: {
          /**
           * UTF-8-encoded content from a text artifact.
           */
          text?: string;
          /**
           * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
           */
          binary?: string;
          /**
           * Key/value pairs that provide additional information about the artifact content.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * A message relevant to the region.
         */
        message?: {
          /**
           * A plain text message string.
           */
          text?: string;
          /**
           * A Markdown message string.
           */
          markdown?: string;
          /**
           * The resource id for a plain text or Markdown message string.
           */
          messageId?: string;
          /**
           * An array of strings to substitute into the message string.
           */
          arguments?: string[];
          /**
           * Key/value pairs that provide additional information about the message.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * Specifies the source language, if any, of the portion of the artifact specified by the region object.
         */
        sourceLanguage?: string;
        /**
         * Key/value pairs that provide additional information about the region.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Specifies a portion of the artifact that encloses the region. Allows a viewer to display additional context around the region.
       */
      contextRegion?: {
        /**
         * The line number of the first character in the region.
         */
        startLine?: number;
        /**
         * The column number of the first character in the region.
         */
        startColumn?: number;
        /**
         * The line number of the last character in the region.
         */
        endLine?: number;
        /**
         * The column number of the character following the end of the region.
         */
        endColumn?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first character in the region.
         */
        charOffset?: number;
        /**
         * The length of the region in characters.
         */
        charLength?: number;
        /**
         * The zero-based offset from the beginning of the artifact of the first byte in the region.
         */
        byteOffset?: number;
        /**
         * The length of the region in bytes.
         */
        byteLength?: number;
        /**
         * The portion of the artifact contents within the specified region.
         */
        snippet?: {
          /**
           * UTF-8-encoded content from a text artifact.
           */
          text?: string;
          /**
           * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
           */
          binary?: string;
          /**
           * Key/value pairs that provide additional information about the artifact content.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * A message relevant to the region.
         */
        message?: {
          /**
           * A plain text message string.
           */
          text?: string;
          /**
           * A Markdown message string.
           */
          markdown?: string;
          /**
           * The resource id for a plain text or Markdown message string.
           */
          messageId?: string;
          /**
           * An array of strings to substitute into the message string.
           */
          arguments?: string[];
          /**
           * Key/value pairs that provide additional information about the message.
           */
          properties?: {
            /**
             * A set of distinct strings that provide additional information.
             */
            tags?: string[];
            [k: string]: any;
          };
        };
        /**
         * Specifies the source language, if any, of the portion of the artifact specified by the region object.
         */
        sourceLanguage?: string;
        /**
         * Key/value pairs that provide additional information about the region.
         */
        properties?: {
          /**
           * A set of distinct strings that provide additional information.
           */
          tags?: string[];
          [k: string]: any;
        };
      };
      /**
       * Key/value pairs that provide additional information about the physical location.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * The human-readable fully qualified name of the logical location. If run.logicalLocations is present, this value matches a property name within that object, from which further information about the logical location can be obtained.
     */
    fullyQualifiedLogicalName?: string;
    /**
     * The index within the logical locations array of the logical location associated with the result.
     */
    logicalLocationIndex?: number;
    /**
     * A message relevant to the location.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A set of regions relevant to the location.
     */
    annotations?: Region[];
    /**
     * Key/value pairs that provide additional information about the location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The call stack leading to this location.
   */
  stack?: {
    /**
     * A message relevant to this call stack.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * An array of stack frames that represents a sequence of calls, rendered in reverse chronological order, that comprise the call stack.
     */
    frames: StackFrame[];
    /**
     * Key/value pairs that provide additional information about the stack.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A set of distinct strings that categorize the thread flow location. Well-known kinds include acquire, release, enter, exit, call, return, branch, implicit, false, true, caution, danger, unknown, unreachable, taint, function, handler, lock, memory, resource, and scope.
   */
  kinds?: string[];
  /**
   * The name of the module that contains the code that is executing.
   */
  module?: string;
  /**
   * A dictionary, each of whose keys specifies a variable or expression, the associated value of which represents the variable or expression value. For an annotation of kind 'continuation', for example, this dictionary might hold the current assumed values of a set of global variables.
   */
  state?: {
    [k: string]: string;
  };
  /**
   * An integer representing a containment hierarchy within the thread flow.
   */
  nestingLevel?: number;
  /**
   * An integer representing the temporal order in which execution reached this location.
   */
  executionOrder?: number;
  /**
   * The Coordinated Universal Time (UTC) date and time at which this location was executed.
   */
  executionTimeUtc?: string;
  /**
   * Specifies the importance of this location in understanding the code flow in which it occurs. The order from most to least important is "essential", "important", "unimportant". Default: "important".
   */
  importance?: "important" | "essential" | "unimportant";
  /**
   * Key/value pairs that provide additional information about the threadflow location.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Represents a path through a graph.
 */
export interface GraphTraversal {
  /**
   * A string that uniquely identifies that graph being traversed.
   */
  graphId: string;
  /**
   * A description of this graph traversal.
   */
  description?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Values of relevant expressions at the start of the graph traversal.
   */
  initialState?: {
    [k: string]: string;
  };
  /**
   * The sequences of edges traversed by this graph traversal.
   */
  edgeTraversals?: EdgeTraversal[];
  /**
   * Key/value pairs that provide additional information about the graph traversal.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Represents the traversal of a single edge during a graph traversal.
 */
export interface EdgeTraversal {
  /**
   * Identifies the edge being traversed.
   */
  edgeId: string;
  /**
   * A message to display to the user as the edge is traversed.
   */
  message?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The values of relevant expressions after the edge has been traversed.
   */
  finalState?: {
    [k: string]: string;
  };
  /**
   * The number of edge traversals necessary to return from a nested graph.
   */
  stepOverEdgeCount?: number;
  /**
   * Key/value pairs that provide additional information about the edge traversal.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A physical location relevant to a result. Specifies a reference to a programming artifact together with a range of bytes or characters within that artifact.
 */
export interface PhysicalLocation {
  /**
   * Value that distinguishes this physical location from all other physical locations in this run object.
   */
  id?: number;
  /**
   * The location of the artifact.
   */
  artifactLocation: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Specifies a portion of the artifact.
   */
  region?: {
    /**
     * The line number of the first character in the region.
     */
    startLine?: number;
    /**
     * The column number of the first character in the region.
     */
    startColumn?: number;
    /**
     * The line number of the last character in the region.
     */
    endLine?: number;
    /**
     * The column number of the character following the end of the region.
     */
    endColumn?: number;
    /**
     * The zero-based offset from the beginning of the artifact of the first character in the region.
     */
    charOffset?: number;
    /**
     * The length of the region in characters.
     */
    charLength?: number;
    /**
     * The zero-based offset from the beginning of the artifact of the first byte in the region.
     */
    byteOffset?: number;
    /**
     * The length of the region in bytes.
     */
    byteLength?: number;
    /**
     * The portion of the artifact contents within the specified region.
     */
    snippet?: {
      /**
       * UTF-8-encoded content from a text artifact.
       */
      text?: string;
      /**
       * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
       */
      binary?: string;
      /**
       * Key/value pairs that provide additional information about the artifact content.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A message relevant to the region.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies the source language, if any, of the portion of the artifact specified by the region object.
     */
    sourceLanguage?: string;
    /**
     * Key/value pairs that provide additional information about the region.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Specifies a portion of the artifact that encloses the region. Allows a viewer to display additional context around the region.
   */
  contextRegion?: {
    /**
     * The line number of the first character in the region.
     */
    startLine?: number;
    /**
     * The column number of the first character in the region.
     */
    startColumn?: number;
    /**
     * The line number of the last character in the region.
     */
    endLine?: number;
    /**
     * The column number of the character following the end of the region.
     */
    endColumn?: number;
    /**
     * The zero-based offset from the beginning of the artifact of the first character in the region.
     */
    charOffset?: number;
    /**
     * The length of the region in characters.
     */
    charLength?: number;
    /**
     * The zero-based offset from the beginning of the artifact of the first byte in the region.
     */
    byteOffset?: number;
    /**
     * The length of the region in bytes.
     */
    byteLength?: number;
    /**
     * The portion of the artifact contents within the specified region.
     */
    snippet?: {
      /**
       * UTF-8-encoded content from a text artifact.
       */
      text?: string;
      /**
       * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
       */
      binary?: string;
      /**
       * Key/value pairs that provide additional information about the artifact content.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A message relevant to the region.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies the source language, if any, of the portion of the artifact specified by the region object.
     */
    sourceLanguage?: string;
    /**
     * Key/value pairs that provide additional information about the region.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the physical location.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A proposed fix for the problem represented by a result object. A fix specifies a set of artifacts to modify. For each artifact, it specifies a set of bytes to remove, and provides a set of new bytes to replace them.
 */
export interface Fix {
  /**
   * A message that describes the proposed fix, enabling viewers to present the proposed change to an end user.
   */
  description?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * One or more artifact changes that comprise a fix for a result.
   */
  changes: ArtifactChange[];
  /**
   * Key/value pairs that provide additional information about the fix.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * A change to a single artifact.
 */
export interface ArtifactChange {
  /**
   * The location of the artifact to change.
   */
  artifactLocation: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * An array of replacement objects, each of which represents the replacement of a single region in a single artifact specified by 'artifactLocation'.
   */
  replacements: Replacement[];
  /**
   * Key/value pairs that provide additional information about the change.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * The replacement of a single region of an artifact.
 */
export interface Replacement {
  /**
   * The region of the artifact to delete.
   */
  deletedRegion: {
    /**
     * The line number of the first character in the region.
     */
    startLine?: number;
    /**
     * The column number of the first character in the region.
     */
    startColumn?: number;
    /**
     * The line number of the last character in the region.
     */
    endLine?: number;
    /**
     * The column number of the character following the end of the region.
     */
    endColumn?: number;
    /**
     * The zero-based offset from the beginning of the artifact of the first character in the region.
     */
    charOffset?: number;
    /**
     * The length of the region in characters.
     */
    charLength?: number;
    /**
     * The zero-based offset from the beginning of the artifact of the first byte in the region.
     */
    byteOffset?: number;
    /**
     * The length of the region in bytes.
     */
    byteLength?: number;
    /**
     * The portion of the artifact contents within the specified region.
     */
    snippet?: {
      /**
       * UTF-8-encoded content from a text artifact.
       */
      text?: string;
      /**
       * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
       */
      binary?: string;
      /**
       * Key/value pairs that provide additional information about the artifact content.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * A message relevant to the region.
     */
    message?: {
      /**
       * A plain text message string.
       */
      text?: string;
      /**
       * A Markdown message string.
       */
      markdown?: string;
      /**
       * The resource id for a plain text or Markdown message string.
       */
      messageId?: string;
      /**
       * An array of strings to substitute into the message string.
       */
      arguments?: string[];
      /**
       * Key/value pairs that provide additional information about the message.
       */
      properties?: {
        /**
         * A set of distinct strings that provide additional information.
         */
        tags?: string[];
        [k: string]: any;
      };
    };
    /**
     * Specifies the source language, if any, of the portion of the artifact specified by the region object.
     */
    sourceLanguage?: string;
    /**
     * Key/value pairs that provide additional information about the region.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * The content to insert at the location specified by the 'deletedRegion' property.
   */
  insertedContent?: {
    /**
     * UTF-8-encoded content from a text artifact.
     */
    text?: string;
    /**
     * MIME Base64-encoded content from a binary artifact, or from a text artifact in its original encoding.
     */
    binary?: string;
    /**
     * Key/value pairs that provide additional information about the artifact content.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * Key/value pairs that provide additional information about the replacement.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
/**
 * Information that describes a run's identity and role within an engineering system process.
 */
export interface RunAutomationDetails {
  /**
   * A description of the identity and role played within the engineering system by this object's containing run object.
   */
  description?: {
    /**
     * A plain text message string.
     */
    text?: string;
    /**
     * A Markdown message string.
     */
    markdown?: string;
    /**
     * The resource id for a plain text or Markdown message string.
     */
    messageId?: string;
    /**
     * An array of strings to substitute into the message string.
     */
    arguments?: string[];
    /**
     * Key/value pairs that provide additional information about the message.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A hierarchical string that uniquely identifies this object's containing run object.
   */
  instanceId?: string;
  /**
   * A stable, unique identifer for this object's containing run object in the form of a GUID.
   */
  instanceGuid?: string;
  /**
   * A stable, unique identifier for the equivalence class of runs to which this object's containing run object belongs in the form of a GUID.
   */
  correlationGuid?: string;
  /**
   * Key/value pairs that provide additional information about the run automation details.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
}
export interface ExternalPropertyFile {
  /**
   * The location of the external property file.
   */
  artifactLocation?: {
    /**
     * A string containing a valid relative or absolute URI.
     */
    uri: string;
    /**
     * A string which indirectly specifies the absolute URI with respect to which a relative URI in the "uri" property is interpreted.
     */
    uriBaseId?: string;
    /**
     * The index within the run artifacts array of the artifact object associated with the artifact location.
     */
    index?: number;
    /**
     * Key/value pairs that provide additional information about the artifact location.
     */
    properties?: {
      /**
       * A set of distinct strings that provide additional information.
       */
      tags?: string[];
      [k: string]: any;
    };
  };
  /**
   * A stable, unique identifer for the external property file in the form of a GUID.
   */
  instanceGuid?: string;
  /**
   * A non-negative integer specifying the number of items contained in the external property file.
   */
  itemCount?: number;
  /**
   * Key/value pairs that provide additional information about the external property file.
   */
  properties?: {
    /**
     * A set of distinct strings that provide additional information.
     */
    tags?: string[];
    [k: string]: any;
  };
  [k: string]: any;
}
