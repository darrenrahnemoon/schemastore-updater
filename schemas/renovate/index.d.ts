/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Any configuration defined within this object will force override existing settings
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration to use in onboarding PRs
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * A configuration object containing configuration encrypted with project key.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration specifically for `package.json`>`engines`
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is major
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is minor
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is patch. Only applies if `separateMinorPatch` is set to true
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is pin.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration to apply when updating a digest (no change in tag/version)
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Config to apply when a PR is necessary due to vulnerability of existing package version.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration for lock file maintenance
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Config if groupName is enabled
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for javascript language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for npm package.json renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for meteor package.js renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for bazel WORKSPACE renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for buildkite pipeline renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Go language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Go modules renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for ruby language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for bundler Gemfiles
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Terraform module renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration option for Rust package management.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Cargo crate renovation.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for node version renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for .travis.yml node version renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for .nvmrc files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Docker language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Docker Compose renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Dockerfile renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Kubernetes renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for CircleCI yml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Ansible yaml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for GitHub Actions workflow renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for composer.json files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for php
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for requirements.txt files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for setup.py files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for Pipfile files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for python
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for compatibility
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for all Java package managers
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for build.gradle files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for gradle-wrapper.properties files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for when renovating Maven pom.xml files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for GitLab CI yml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for .NET language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Configuration object for C#/Nuget
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
/**
 * Table column definitions for use in PR tables
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Use git for FS operations instead of API. GitHub only.
   */
  gitFs?: "https" | "http" | "ssh";
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "hashicorp"
    | "hex"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "pep440"
    | "ruby"
    | "semver";
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually (GitHub only)
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: any[];
  prBodyDefinitions?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  [k: string]: any;
}
