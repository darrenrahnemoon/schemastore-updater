/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration to use in onboarding PRs
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * A configuration object containing configuration encrypted with project key. Valid inside renovate.json only
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration specifically for `package.json`>`engines`
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is major
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is minor
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is patch. Only applies if `separateMinorPatch` is set to true
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is pin.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration to apply when updating a Docker digest (same tag)
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration for lock file maintenance
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for npm package.json renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for meteor package.js renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for bazel WORKSPACE renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for buildkite pipeline renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for node version renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for .travis.yml node version renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for .nvmrc files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for Dockerfile renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for Docker Compose renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for CircleCI yml renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for composer.json files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for php
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for requirements.txt files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for python
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
/**
 * Configuration object for C#/Nuget
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: any[];
  /**
   * Enable or disable renovate
   */
  enabled?: boolean;
  /**
   * Any configuration defined within this object will force override existing settings
   */
  force?: {
    [k: string]: any;
  };
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * Logging level
   */
  logLevel?: string;
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether to renovate a forked repository or not.
   */
  renovateFork?: boolean;
  /**
   * Set to true if Renovate should fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if Renovate should use fork mode with a renovate.json in branch `renovate-config`
   */
  mirrorMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate Renovate.
   */
  requireConfig?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to renovate
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * Enable this to expose bot process.env to repositories for npmrc substitution and package installation
   */
  exposeEnv?: boolean;
  /**
   * Platform type of repository
   */
  platform?: string;
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for autnenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * enable copy local libraries found in package.json like `"lib1: file:../path/to/folder"`, warning: feature may be deprecated in future.
   */
  copyLocalLibs?: boolean;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be renovated. If left empty, the default branch will be renovate
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package.json whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * List of strings or glob patterns to match against package files. Applicable inside packageRules only
   */
  paths?: string[];
  engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: ({
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: any[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    updateTypes?: ("major" | "minor" | "patch")[];
    [k: string]: any;
  } & JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom)[];
  /**
   * A semver range defining allowed versions for dependencies
   */
  allowedVersions?: string;
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Regex for identifying unstable versions (docker only)
   */
  unstablePattern?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "patch" | "minor" | "major";
  major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string | null;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string | null;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Rebase stale PRs (GitHub only)
   */
  rebaseStalePrs?: boolean;
  /**
   * `Set a "renovate/verify" status check for all PRs`
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * When to create the PR for a branch. Values: immediate, not-pending, status-success.
   */
  prCreation?: "immediate" | "not-pending" | "status-success";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge - "branch", "pr", or "pr-comment". Branch support is GitHub-only
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request body template
   */
  prBody?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  /**
   * Config if groupName is enabled
   */
  group?: {
    [k: string]: any;
  };
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (username in GitHub/GitLab, email address in VSTS)
   */
  assignees?: string[];
  /**
   * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in VSTS)
   */
  reviewers?: string[];
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: any[];
  node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  "docker-compose"?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  [k: string]: any;
}
