/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Any configuration defined within this object will force override existing settings
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration to use in onboarding PRs
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * A configuration object containing configuration encrypted with project key.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration specifically for `package.json`>`engines`
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Aliases for registries, package manager specific
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: string;
}
/**
 * Configuration to apply when an update type is major
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is minor
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is patch. Only applies if `separateMinorPatch` is set to true
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration to apply when an update type is pin.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration to apply when updating a digest (no change in tag/version)
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Config to apply when a PR is necessary due to vulnerability of existing package version.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration for lock file maintenance
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Config if groupName is enabled
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for javascript language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for npm package.json renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for meteor package.js renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for bazel WORKSPACE renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for buildkite pipeline renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Go language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Go modules renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for ruby language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for bundler Gemfiles
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for .ruby-version updating
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Terraform module renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Mix module renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration option for Rust package management.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Cargo crate renovation.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for node version renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for .travis.yml node version renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for .nvmrc files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for when renovating Dart pubspec files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Docker language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Docker Compose renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Dockerfile renovation
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Kubernetes renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for helm requirements.yaml files.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for CircleCI yml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for DroneCI yml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Ansible yaml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for GitHub Actions workflow renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for composer.json files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for git submodule files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for php
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for requirements.txt files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for setup.py files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for Pipfile files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for pyproject.toml files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for python
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for *.sbt files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for renovating Clojure leiningen projects
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for renovating Clojure CLI-based projects (deps.edn)
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for compatibility
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for all Java package managers
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for build.gradle files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for gradle-wrapper.properties files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for when renovating Maven pom.xml files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for GitLab CI yml renovation. Also inherits settings from `docker` object.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for GitLab CI yml renovation for include.
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for .NET language
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for C#/Nuget
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration object for homebrew
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
/**
 * Configuration for Package.swift files
 */
export interface JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62 {
  /**
   * Configuration presets to use/extend. Note: does not work if configured in config.js
   */
  extends?: string[];
  /**
   * A list of presets to ignore, including nested ones inside `extends`
   */
  ignorePresets?: string[];
  /**
   * Plain text description for a config or preset
   */
  description?: string[];
  /**
   * Enable or disable Renovate
   */
  enabled?: boolean;
  force?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom1;
  /**
   * Whether CLI configuration options should be moved to the `force` config section
   */
  forceCli?: boolean;
  /**
   * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
   */
  dryRun?: boolean;
  /**
   * If enabled, log the full resolved config for each repo, including resolved presets
   */
  printConfig?: boolean;
  /**
   * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
   */
  binarySource?: string;
  /**
   * The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.
   */
  baseDir?: string;
  /**
   * The directory for Renovate for storing caches. If left empty, Renovate will create a subdirectory within `baseDir` to use.
   */
  cacheDir?: string;
  /**
   * Map relevant home directory dotfiles into containers when binarySource=docker.
   */
  dockerMapDotfiles?: boolean;
  /**
   * Specify UID and GID for docker-based binaries when binarySource=docker is used.
   */
  dockerUser?: string;
  /**
   * Logging level
   */
  logLevel?: "fatal" | "error" | "warn" | "info" | "debug" | "trace";
  /**
   * Log file path
   */
  logFile?: string;
  /**
   * Log file log level
   */
  logFileLevel?: string;
  /**
   * Require a Configuration PR first
   */
  onboarding?: boolean;
  onboardingConfig?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom2;
  /**
   * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
   */
  includeForks?: boolean;
  /**
   * Set to true to fork the source repository and create branches there instead
   */
  forkMode?: boolean;
  /**
   * Set to true if repositories must have a config to activate.
   */
  requireConfig?: boolean;
  /**
   * Set to true to first check for disabling in config before cloning
   */
  optimizeForDisabled?: boolean;
  /**
   * Whether to create a "Master Issue" within the repository.
   */
  masterIssue?: boolean;
  /**
   * Whether updates should require manual approval from within the Master Issue before creation.
   */
  masterIssueApproval?: boolean;
  /**
   * Set to `true` and Renovate will autoclose the Master Issue if there are no updates.
   */
  masterIssueAutoclose?: boolean;
  /**
   * Title to use for the Master Issue
   */
  masterIssueTitle?: string;
  /**
   * Set this to false and Renovate will open each config warning in a new issue instead of reopening/reusing an existing issue.
   */
  configWarningReuseIssue?: boolean;
  /**
   * Server-side private key
   */
  privateKey?: string;
  encrypted?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom3;
  /**
   * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
   */
  timezone?: string;
  /**
   * Times of day/week to limit branch creation to
   */
  schedule?: string[];
  /**
   * Whether to update (but not create) branches when not scheduled
   */
  updateNotScheduled?: boolean;
  /**
   * If set to true, repository data will preserved between runs instead of deleted.
   */
  persistRepoData?: boolean;
  /**
   * Set this to "high" if the bot should trust the repository owners/contents
   */
  trustLevel?: string;
  /**
   * Platform type of repository
   */
  platform?: "azure" | "bitbucket" | "bitbucket-server" | "github" | "gitlab";
  /**
   * Custom endpoint to use
   */
  endpoint?: string;
  /**
   * Repository Auth Token
   */
  token?: string;
  /**
   * Username for authentication. Currently Bitbucket only
   */
  username?: string;
  /**
   * Password for authentication. Currently Bitbucket only (AppPassword).
   */
  password?: string;
  /**
   * String copy of npmrc file. Use \n instead of line breaks
   */
  npmrc?: string;
  /**
   * npm token used for authenticating with the default registry
   */
  npmToken?: string;
  /**
   * String copy of yarnrc file. Use \n instead of line breaks
   */
  yarnrc?: string;
  /**
   * Set to false to disable lock file updating
   */
  updateLockFiles?: boolean;
  /**
   * Skip installing modules/dependencies if lock file updating is possible alone
   */
  skipInstalls?: boolean;
  /**
   * Whether to ignore any .npmrc file found in repository
   */
  ignoreNpmrcFile?: boolean;
  /**
   * Autodiscover all repositories
   */
  autodiscover?: boolean;
  /**
   * Filter the list of autodiscovered repositories
   */
  autodiscoverFilter?: string;
  /**
   * Set a maximum number of commits per Renovate run. Default is no limit.
   */
  prCommitsPerRunLimit?: number;
  /**
   * List of Repositories
   */
  repositories?: any[];
  /**
   * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
   */
  baseBranches?: any[];
  /**
   * Author to use for git commits. RFC5322
   */
  gitAuthor?: string;
  /**
   * PGP key to use for signing git commits
   */
  gitPrivateKey?: string;
  /**
   * A list of package managers to enable. If defined, then all managers not on the list are disabled.
   */
  enabledManagers?: any[];
  /**
   * Include package files only within these defined paths
   */
  includePaths?: string[];
  /**
   * Skip any package file whose path matches one of these. Can be string or glob pattern
   */
  ignorePaths?: string[];
  /**
   * A file that matches any of these glob patterns will not be committed, even if it has been updated.
   */
  excludeCommitPaths?: string[];
  engines?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom4;
  aliases?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom5;
  /**
   * List of URLs to try for dependency lookup. Package manager-specific
   */
  registryUrls?: string[];
  /**
   * Version scheme to use for filtering and comparisons
   */
  versionScheme?:
    | "cargo"
    | "composer"
    | "docker"
    | "git"
    | "hashicorp"
    | "hex"
    | "ivy"
    | "loose"
    | "maven"
    | "node"
    | "npm"
    | "nuget"
    | "pep440"
    | "poetry"
    | "regex"
    | "ruby"
    | "semver"
    | "swift";
  /**
   * If set to true, Azure DevOps PRs will be set to auto-complete after all (if any) branch policies have been met
   */
  azureAutoComplete?: boolean;
  /**
   * The id of an existing work item on Azure Boards to link to each PR
   */
  azureWorkItemId?: number;
  /**
   * Dependencies to ignore
   */
  ignoreDeps?: string[];
  /**
   * Rules for matching package names
   */
  packageRules?: {
    /**
     * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
     */
    languages?: string[];
    /**
     * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
     */
    baseBranchList?: string[];
    /**
     * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
     */
    managers?: string[];
    /**
     * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
     */
    datasources?: string[];
    /**
     * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
     */
    depTypeList?: string[];
    /**
     * Package names to match. Valid only within `packageRules` object
     */
    packageNames?: string[];
    /**
     * Package names to exclude. Valid only within `packageRules` object
     */
    excludePackageNames?: string[];
    /**
     * Package name patterns to match. Valid only within `packageRules` object.
     */
    packagePatterns?: string[];
    /**
     * Package name patterns to exclude. Valid only within `packageRules` object.
     */
    excludePackagePatterns?: string[];
    /**
     * A version or version range to match against the current version of a package. Valid only within `packageRules` object
     */
    matchCurrentVersion?: string;
    /**
     * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
     */
    sourceUrlPrefixes?: string[];
    /**
     * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
     */
    updateTypes?: ("major" | "minor" | "patch" | "pin" | "digest" | "lockFileMaintenance" | "rollback" | "bump")[];
    /**
     * List of strings or glob patterns to match against package files. Applicable inside packageRules only
     */
    paths?: string[];
    /**
     * A semver range defining allowed versions for dependencies
     */
    allowedVersions?: string;
    [k: string]: any;
  }[];
  /**
   * Whether to add digests to Dockerfile source images
   */
  pinDigests?: boolean;
  /**
   * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
   */
  separateMajorMinor?: boolean;
  /**
   * If set to true, PRs will be raised separately for each available major upgrade version
   */
  separateMultipleMajor?: boolean;
  /**
   * If set to true, it will separate minor and patch updates into separate branches
   */
  separateMinorPatch?: boolean;
  /**
   * Ignore versions with unstable semver
   */
  ignoreUnstable?: boolean;
  /**
   * Ignore deprecated versions unless the current version is deprecated
   */
  ignoreDeprecated?: boolean;
  /**
   * If defined, packages will follow this release tag exactly.
   */
  followTag?: string;
  /**
   * Ignore versions newer than npm "latest" version
   */
  respectLatest?: boolean;
  /**
   * Policy for how to modify/update existing ranges.
   */
  rangeStrategy?: "auto" | "pin" | "bump" | "replace" | "widen" | "update-lockfile";
  /**
   * Prefix to use for all branch names
   */
  branchPrefix?: string;
  /**
   * Bump the version in the package.json being updated
   */
  bumpVersion?: "major" | "minor" | "patch";
  major?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom6;
  minor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom7;
  patch?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom8;
  pin?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom9;
  digest?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom10;
  /**
   * Enable semantic commit prefixes for commits and PR titles
   */
  semanticCommits?: boolean;
  /**
   * Commit type to use if semantic commits is enabled
   */
  semanticCommitType?: string;
  /**
   * Commit scope to use if semantic commits are enabled
   */
  semanticCommitScope?: string;
  /**
   * Create PRs to roll back versions if the current version is not found in the registry
   */
  rollbackPrs?: boolean;
  /**
   * Recreate PRs even if same ones were closed previously
   */
  recreateClosed?: boolean;
  /**
   * Auto-rebase when there is conflict in PRs
   */
  rebaseConflictedPrs?: boolean;
  /**
   * Rebase any PRs that are not up-to-date with the base branch
   */
  rebaseStalePrs?: boolean;
  /**
   * Label to use to request the bot to rebase a PR manually
   */
  rebaseLabel?: string;
  /**
   * Set a verify status check for all PRs
   */
  statusCheckVerify?: boolean;
  /**
   * Set a status check for unpublish-safe upgrades
   */
  unpublishSafe?: boolean;
  /**
   * Number of days required before a new release is considered to be stabilized.
   */
  stabilityDays?: number;
  /**
   * When to create the PR for a branch.
   */
  prCreation?: "immediate" | "not-pending" | "status-success" | "approval";
  /**
   * Timeout in hours for when prCreation=not-pending
   */
  prNotPendingHours?: number;
  /**
   * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
   */
  prHourlyLimit?: number;
  /**
   * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
   */
  prConcurrentLimit?: number;
  /**
   * Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.
   */
  prPriority?: number;
  /**
   * Use the default reviewers (Bitbucket only).
   */
  bbUseDefaultReviewers?: boolean;
  /**
   * Whether to automerge branches/PRs automatically, without human intervention
   */
  automerge?: boolean;
  /**
   * How to automerge, if enabled.
   */
  automergeType?: "branch" | "pr" | "pr-comment";
  /**
   * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
   */
  automergeComment?: string;
  /**
   * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
   */
  requiredStatusChecks?: string[];
  vulnerabilityAlerts?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom11;
  /**
   * Branch name template
   */
  branchName?: string;
  /**
   * Branch manager prefix
   */
  managerBranchPrefix?: string;
  /**
   * Branch topic
   */
  branchTopic?: string;
  /**
   * Message to use for commit messages and pull request titles
   */
  commitMessage?: string;
  /**
   * Commit message body template. Will be appended to commit message, separated by two line returns.
   */
  commitBody?: string;
  /**
   * If enabled, append a table in the commit message body describing all updates in the commit
   */
  commitBodyTable?: boolean;
  /**
   * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
   */
  commitMessagePrefix?: string;
  /**
   * Action verb to use in commit messages and PR titles
   */
  commitMessageAction?: string;
  /**
   * The upgrade topic/noun used in commit messages and PR titles
   */
  commitMessageTopic?: string;
  /**
   * Extra description used after the commit message topic - typically the version
   */
  commitMessageExtra?: string;
  /**
   * Suffix to add to end of commit messages and PR titles.
   */
  commitMessageSuffix?: string;
  /**
   * Pull Request title template (deprecated). Now uses commitMessage.
   */
  prTitle?: string;
  /**
   * Pull Request footer template
   */
  prFooter?: string;
  lockFileMaintenance?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom12;
  /**
   * Use group names only when multiple dependencies upgraded
   */
  lazyGrouping?: boolean;
  /**
   * Human understandable name for the dependency group
   */
  groupName?: string;
  /**
   * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
   */
  groupSlug?: string;
  group?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom13;
  /**
   * Labels to add to Pull Request
   */
  labels?: string[];
  /**
   * Assignees for Pull Request (either username or email address depending on the platform)
   */
  assignees?: string[];
  /**
   * Take a random sample of given size from assignees.
   */
  assigneesSampleSize?: number;
  /**
   * Assign reviewers and assignees even if the PR is to be automerged
   */
  assignAutomerge?: boolean;
  /**
   * Requested reviewers for Pull Requests (either username or email address depending on the platform)
   */
  reviewers?: string[];
  /**
   * Take a random sample of given size from reviewers.
   */
  reviewersSampleSize?: number;
  /**
   * JS RegExp pattern for matching manager files
   */
  fileMatch?: string[];
  js?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom14;
  npm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom15;
  meteor?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom16;
  bazel?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom17;
  buildkite?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom18;
  golang?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom19;
  gomod?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom20;
  /**
   * Enable post-update options to be run after package/artifact updating
   */
  postUpdateOptions?: any[];
  ruby?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom21;
  bundler?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom22;
  "ruby-version"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom23;
  terraform?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom24;
  mix?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom25;
  rust?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom26;
  cargo?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom27;
  /**
   * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
   */
  supportPolicy?: string[];
  node?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom28;
  travis?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom29;
  nvm?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom30;
  pub?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom31;
  docker?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom32;
  "docker-compose"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom33;
  dockerfile?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom34;
  kubernetes?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom35;
  "helm-requirements"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom36;
  circleci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom37;
  droneci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom38;
  ansible?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom39;
  "github-actions"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom40;
  composer?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom41;
  "git-submodules"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom42;
  php?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom43;
  pip_requirements?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom44;
  pip_setup?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom45;
  pipenv?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom46;
  poetry?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom47;
  python?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom48;
  sbt?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom49;
  leiningen?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom50;
  "deps-edn"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom51;
  compatibility?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom52;
  java?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom53;
  gradle?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom54;
  "gradle-wrapper"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom55;
  maven?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom56;
  gitlabci?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom57;
  "gitlabci-include"?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom58;
  dotnet?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom59;
  nuget?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom60;
  homebrew?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom61;
  /**
   * Host rules/configuration including credentials
   */
  hostRules?: {
    /**
     * hostType for a package rule. Can be a platform name or a datasource name
     */
    hostType?: string;
    /**
     * Domain name for a host rule. e.g. "docker.io"
     */
    domainName?: string;
    /**
     * Hostname for a host rule. e.g. "index.docker.io"
     */
    hostName?: string;
    /**
     * baseUrl for a host rule. e.g. "https://api.github.com/"
     */
    baseUrl?: string;
    /**
     * timeout (in milliseconds) for queries to external endpoints
     */
    timeout?: number;
    /**
     * explicity turn on insecure docker registry access (http)
     */
    insecureRegistry?: boolean;
    [k: string]: any;
  }[];
  /**
   * Table column definitions for use in PR tables
   */
  prBodyDefinitions?: {
    [k: string]: any;
  };
  /**
   * List of columns to use in PR bodies
   */
  prBodyColumns?: any[];
  /**
   * List of additional notes/templates to be included in the Pull Request bodies.
   */
  prBodyNotes?: string[];
  /**
   * Options to suppress various types of warnings and other notifications
   */
  suppressNotifications?: any[];
  swift?: JSONSchemaForRenovateConfigFilesHttpsRenovatebotCom62;
  /**
   * Enable or disable pruning of stale branches
   */
  pruneStaleBranches?: boolean;
  /**
   * Enable or disable Unicode emoji
   */
  unicodeEmoji?: boolean;
  /**
   * Enable or disable usage of GitLab's "merge when pipeline succeeds" feature when automerging PRs
   */
  gitLabAutomerge?: boolean;
  [k: string]: any;
}
