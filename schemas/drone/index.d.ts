/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type DroneCIConfigurationFile =
  | (
      | {
          type?: {
            [k: string]: unknown;
          };
          steps?: StepDocker[];
          volumes?: (
            | {
                [k: string]: unknown;
              }
            | {
                [k: string]: unknown;
              }
          )[];
          services?: {
            name: NonEmptyString;
            image: NonEmptyString;
            command?: Commands;
            entrypoint?: Commands;
            environment?: Environment;
            privileged?: boolean;
            pull?: {
              [k: string]: unknown;
            };
            volumes?: Volumes;
            working_dir?: NonEmptyString;
            [k: string]: unknown;
          }[];
          image_pull_secrets?: string[];
          node?: {
            instance?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }
      | {
          type?: {
            [k: string]: unknown;
          };
          steps?: Step[];
          [k: string]: unknown;
        }
      | {
          type?: {
            [k: string]: unknown;
          };
          steps?: Step[];
          server: {
            host: StringOrSecret;
            user: StringOrSecret;
            password?: StringOrSecret;
            ssh_key?: StringOrSecret;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }
      | {
          type?: {
            [k: string]: unknown;
          };
          token: StringOrSecret;
          steps?: Step[];
          [k: string]: unknown;
        }
    )
  | {
      kind?: {
        [k: string]: unknown;
      };
      hmac: string;
      [k: string]: unknown;
    }
  | {
      kind?: {
        [k: string]: unknown;
      };
      name: NonEmptyString;
      get: {
        path: NonEmptyString;
        name: NonEmptyString;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type StepDocker = Step & {
  command?: NonEmptyString;
  entrypoint?: Commands;
  image: NonEmptyString;
  network_mode?: string;
  privileged?: boolean;
  pull?: "always" | "never" | "if-not-exists";
  user?: string;
  volumes?: Volumes;
  [k: string]: unknown;
};
export type NonEmptyString = string;
export type Commands = NonEmptyString[];
export type Conditions =
  | Condition
  | {
      include?: Condition;
      [k: string]: unknown;
    }
  | {
      exclude?: Condition;
      [k: string]: unknown;
    };
export type Condition = string[];
export type Volumes = {
  name: NonEmptyString;
  path: NonEmptyString;
  [k: string]: unknown;
}[];
export type StringOrSecret = NonEmptyString | Secret;

export interface Step {
  name: NonEmptyString;
  failure?: "always" | "ignore";
  commands: Commands;
  detach?: boolean;
  environment?: Environment;
  when?: AllConditions;
  depends_on?: NonEmptyString[];
  [k: string]: unknown;
}
export interface Environment {
  [k: string]: string | Secret;
}
export interface Secret {
  from_secret: string;
  [k: string]: unknown;
}
export interface AllConditions {
  branch?: Conditions;
  event?: Conditions;
  ref?: Conditions;
  repo?: Conditions;
  status?: Condition;
  target?: Condition;
  [k: string]: unknown;
}
