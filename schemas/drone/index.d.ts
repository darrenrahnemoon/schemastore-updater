/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type DroneCIConfigurationFile =
  | {
      kind?: {
        [k: string]: any;
      };
      name?: NonEmptyString;
      clone?: {
        depth?: number;
        disable?: {
          [k: string]: any;
        };
        [k: string]: any;
      };
      platform?: Platform;
      steps?: {
        name: NonEmptyString;
        image: NonEmptyString;
        when?: AllConditions;
        platform?: Platform;
        commands?: Commands;
        detach?: boolean;
        environment?: Environment;
        privileged?: boolean;
        pull?: {
          [k: string]: any;
        };
        volumes?: Volumes;
        [k: string]: any;
      }[];
      trigger?: AllConditions;
      node?: {
        instance?: string;
        [k: string]: any;
      };
      services?: {
        name: NonEmptyString;
        image: NonEmptyString;
        command?: Commands;
        entrypoint?: Commands;
        environment?: Environment;
        privileged?: boolean;
        pull?: {
          [k: string]: any;
        };
        volumes?: Volumes;
        working_dir?: NonEmptyString;
        [k: string]: any;
      }[];
      volumes?: (
        | {
            [k: string]: any;
          }
        | {
            [k: string]: any;
          })[];
      depends_on?: string[];
      [k: string]: any;
    }
  | {
      kind?: {
        [k: string]: any;
      };
      hmac: string;
      [k: string]: any;
    }
  | {
      kind?: {
        [k: string]: any;
      };
      name: NonEmptyString;
      get: {
        path: NonEmptyString;
        name: NonEmptyString;
        [k: string]: any;
      };
      [k: string]: any;
    };
export type NonEmptyString = string;
export type Conditions =
  | Condition
  | {
      include?: Condition;
      [k: string]: any;
    }
  | {
      exclude?: Condition;
      [k: string]: any;
    };
export type Condition = string[];
export type Commands = NonEmptyString[];
export type Volumes = {
  name: NonEmptyString;
  path: NonEmptyString;
  [k: string]: any;
}[];

export interface Platform {
  os?: "linux" | "windows";
  ar—Åh?: "arm" | "arm64" | "amd64";
  [k: string]: any;
}
export interface AllConditions {
  branch?: Conditions;
  event?: Conditions;
  ref?: Conditions;
  repo?: Conditions;
  status?: Condition;
  target?: Condition;
  [k: string]: any;
}
export interface Environment {
  [k: string]:
    | string
    | {
        from_secret: string;
        [k: string]: any;
      };
}
