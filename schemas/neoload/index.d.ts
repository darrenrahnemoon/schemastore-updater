/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Url = string;
export type Name = string;
export type Includes = [Value, ...Value[]];
export type Value = string;
export type Variables = [
  Constant | File | Counter | RandomNumber | Javascript,
  ...(Constant | File | Counter | RandomNumber | Javascript)[]
];
export type Constant = {
  name?: Name;
  descrption?: Value;
  change_policy?: "each_use" | "each_request" | "each_page" | "each_iteration" | "each_user";
  [k: string]: any;
} & {
  value?: Value;
  [k: string]: any;
};
export type File = {
  name?: Name;
  descrption?: Value;
  change_policy?: "each_use" | "each_request" | "each_page" | "each_iteration" | "each_user";
  [k: string]: any;
} & {
  column_names?: [string];
  is_first_line_column_names?: boolean;
  start_from_line?: number;
  delimiter?: Value1;
  path?: Value;
  scope?: "local" | "global" | "unique";
  order?: "sequential" | "random" | "any";
  out_of_value?: "cycle" | "stop_test" | "no_value_code";
  [k: string]: any;
};
export type Value1 = string;
export type Counter = {
  name?: Name;
  descrption?: Value;
  change_policy?: "each_use" | "each_request" | "each_page" | "each_iteration" | "each_user";
  [k: string]: any;
} & {
  start?: number;
  end?: number;
  increment?: number;
  scope?: "local" | "global" | "unique";
  out_of_value?: "cycle" | "stop_test" | "no_value_code";
  [k: string]: any;
};
export type RandomNumber = {
  name?: Name;
  descrption?: Value;
  change_policy?: "each_use" | "each_request" | "each_page" | "each_iteration" | "each_user";
  [k: string]: any;
} & {
  min?: number;
  max?: number;
  predictable?: boolean;
  [k: string]: any;
};
export type Javascript = {
  name?: Name;
  descrption?: Value;
  change_policy?: "each_use" | "each_request" | "each_page" | "each_iteration" | "each_user";
  [k: string]: any;
} & {
  script?: Value;
  [k: string]: any;
};
export type Servers = [Server, ...Server[]];
export type BasicAuthentication = {
  login?: Value;
  password?: Value;
  [k: string]: any;
} & {
  realm?: Value;
  [k: string]: any;
};
export type NTLMAuthentication = {
  login?: Value;
  password?: Value;
  [k: string]: any;
} & {
  domain?: Value;
  [k: string]: any;
};
export type SLAProfiles = [SLAProfile, ...SLAProfile[]];
export type Thresholds = [Threshold, ...Threshold[]];
export type Threshold = string;
export type Populations = [Population, ...Population[]];
export type Scenarios = [Scenario, ...Scenario[]];
export type ScenarioPopulations = [
  (
    | ConstantLoad
    | RampUpLoad
    | PeaksLoad1
    | {
        name?: Value;
        [k: string]: any;
      }
  ),
  ...(
    | ConstantLoad
    | RampUpLoad
    | PeaksLoad1
    | {
        name?: Value;
        [k: string]: any;
      }
  )[]
];
export type ConstantLoad = {
  duration?: Duration;
  start_after?: StartAfter;
  stop_after?: StopAfter;
  [k: string]: any;
} & {
  users?: number;
  rampup?: Value;
  [k: string]: any;
};
export type Duration = string;
export type StartAfter = string;
export type StopAfter = string;
export type RampUpLoad = {
  duration?: Duration;
  start_after?: StartAfter;
  stop_after?: StopAfter;
  [k: string]: any;
} & {
  min_users?: number;
  max_users?: number;
  increment_users?: number;
  increment_every?: Value;
  increment_rampup?: Value;
  [k: string]: any;
};
export type PeaksLoad1 = {
  duration?: Duration;
  start_after?: StartAfter;
  stop_after?: StopAfter;
  [k: string]: any;
} & {
  minimum?: PeaksLoad;
  maximum?: PeaksLoad;
  start?: "minimum" | "maximum";
  step_rampup?: Value;
  [k: string]: any;
};
export type UserPaths = [UserPath, ...UserPath[]];
export type ActionTransaction = Containers & {
  name?: Value;
  description?: Value;
  [k: string]: any;
};
export type ActionDelay = Value;
export type ActionThinkTime = Value;
export type Steps = (
  | ActionTransaction
  | ActionHTTPSRequest
  | ActionDelay
  | ActionThinkTime
  | ActionJavascript
  | ActionIf
)[];

export interface JSONSchemaForNeoLoadAsCodeFiles {
  $schema?: Url;
  name?: Name;
  includes?: Includes;
  variables?: Variables;
  servers?: Servers;
  sla_profiles?: SLAProfiles;
  populations?: Populations;
  scenarios?: Scenarios;
  user_paths?: UserPaths;
}
export interface Server {
  name?: Value;
  host?: Value;
  scheme?: "http" | "https";
  port?: number;
  basic_authentication?: BasicAuthentication;
  ntlm_authentication?: NTLMAuthentication;
  negotiate_authentication?: BasicAuthentication;
}
export interface SLAProfile {
  name?: Value;
  description?: Value;
  thresholds?: Thresholds;
  [k: string]: any;
}
export interface Population {
  name?: Value;
  description?: Value;
  xcomments?: {
    [k: string]: any;
  };
  user_paths?: {
    name?: Value;
    [k: string]: any;
  }[];
  [k: string]: any;
}
export interface Scenario {
  name?: Value;
  description?: Value;
  populations?: ScenarioPopulations;
  [k: string]: any;
}
export interface PeaksLoad {
  users?: number;
  duration?: Value;
  [k: string]: any;
}
export interface UserPath {
  name?: Value;
  description?: Value;
  user_session?: "reset_on" | "reset_off" | "reset_auto";
  init?: Containers;
  actions?: Containers;
  end?: Containers;
  [k: string]: any;
}
export interface Containers {
  sla_profile?: string;
  steps?: Steps;
  [k: string]: any;
}
export interface ActionHTTPSRequest {
  url?: Value;
  server?: Value;
  method?: "GET" | "POST" | "HEAD" | "PUT" | "DELETE" | "OPTIONS" | "TRACE";
  headers?: Value[];
  sla_profile?: Value;
  body?: Value;
  extractors?: {
    name?: Value;
    from?: "header" | "body" | "both";
    xpath?: Value;
    jsonpath?: Value;
    regexp?: Value;
    match_number?: number;
    template?: Value;
    decode?: "html" | "url";
    extract_once?: boolean;
    default?: string;
    throw_assertion_error?: boolean;
    [k: string]: any;
  }[];
  [k: string]: any;
}
export interface ActionJavascript {
  name?: Value;
  description?: Value;
  script?: Value;
  [k: string]: any;
}
export interface ActionIf {
  name?: Value;
  description?: Value;
  conditions?: Value[];
  match?: "any" | "all";
  then?: Containers;
  else?: Containers;
  [k: string]: any;
}
