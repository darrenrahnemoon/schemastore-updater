/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JSONSchemaForReactCosmosConfigs {
  $schema?: string;
  /**
   * The root directory that all others paths in this config are relative to. Usually the root of your repo. If omitted, rootDir is equal to the directory containing your Cosmos config. When you don't use a Cosmos config, rootDir defaults to the current working directory.
   */
  rootDir?: string;
  /**
   * Where to generate static exports on disk. [default: "cosmos-export"]
   */
  exportPath?: string;
  /**
   * Dir path to serve static assets from.
   */
  staticPath?: string;
  /**
   * Base URL for static assets. [default: "/"]
   */
  publicUrl?: string;
  /**
   * Name for directories that contain fixtures (eg. __fixtures__/example.jsx). [default: "__fixtures__"]
   */
  fixturesDir?: string;
  /**
   * Suffix for fixture files (eg. example.fixture.jsx). [default: "fixture"]
   */
  fixtureFileSuffix?: string;
  /**
   * Directories where the Cosmos server watches for fixture files changes while running. [default: ["."]]
   */
  watchDirs?: string[];
  /**
   * Where to generate a file that contains a map to all fixtures and other Cosmos-related user modules. Only used in setups where Cosmos can't piggyback on the user's build (eg. React Native setups). [default: "cosmos.userdeps.js"]
   */
  userDepsFilePath?: string;
  /**
   * Dev server hostname. Set to null to accept connections with any hostname. [default: null]
   */
  hostname?: string | null;
  /**
   * Dev server port. [default: 5000]
   */
  port?: number;
  /**
   * Proxy some URLs to a different HTTP server (eg. an API backend dev server). Similar to devServer.proxy in webpack config.
   */
  httpProxy?: {
    [k: string]: unknown;
  };
  /**
   * Modules to be imported before loading components. Stuff like reset.css, polyfills, etc.
   */
  globalImports?: string[];
  /**
   * DOM-related options
   */
  dom?: {
    /**
     * Document selector for existing element to use as component parent (eg. #root). A blank container element is created from scratch if no selector is provided. [default: null]
     */
    containerQuerySelector?: string | null;
    [k: string]: unknown;
  };
  /**
   * Webpack-related options
   */
  webpack?: {
    /**
     * Path to an existing webpack config, which Cosmos will reuse to build your code. Set to null to disable this behavior. [default "webpack.config.js"]
     */
    configPath?: string | null;
    /**
     * Path to a user module that customizes the webpack config used by Cosmos. Set to null to disable this behavior. [default "webpack.override.js"]
     */
    overridePath?: string | null;
    /**
     * Enable webpack's Hot Module Replacement. [default: true]
     */
    hotReload?: boolean;
  };
  /**
   * UI plugin options
   */
  ui?: {
    responsivePreview?: {
      /**
       * List of device viewports
       */
      devices?: {
        label: string;
        width: number;
        height: number;
      }[];
    };
    [k: string]: unknown;
  };
}
