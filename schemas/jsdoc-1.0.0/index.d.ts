/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Enables plugins for JSDoc
 */
export type ConfiguringPlugins = any[];
/**
 * Controls recursion depth for source files and tutorials
 */
export type SpecifyingRecursionDepth = number;
/**
 * An array of paths to input files
 */
export type InputFilesPaths = any[];
/**
 * An array of paths to exclude from input
 */
export type InputFilesExclusionPaths = any[];
/**
 * Forces input filenames to match regular expression
 */
export type InclusionRegExp = string;
/**
 * Forces input filenames to match regular expression
 */
export type ExclusionRegExp = string;
/**
 * Determines how input files are parsed
 */
export type SpecifyingSourceType = "module" | "script";
/**
 * The path to the template to use for generating output
 */
export type OutputTemplate = string;
/**
 * Assume this encoding when reading all source files
 */
export type InputFilesEncoding = string;
/**
 * The path to the output folder for the generated documentation
 */
export type OutputFolder = string;
/**
 * The `package.json` file that contains the project name, version, and other details
 */
export type Package = string;
/**
 * Recurses to subdirectories when searching input files
 */
export type RecurseToSubdirectories = boolean;
/**
 * Directory in which JSDoc should search for tutorials
 */
export type TutorialsPath = string;
/**
 * Determines how to handle unrecognized tags
 */
export type UnknownTags2 = UnknownTags;
export type JSDocTag = string;
/**
 * Determines how to handle unrecognized tags
 */
export type UnknownTags = JSDocTag[];
export type Dictionary = "jsdoc" | "closure";
/**
 * Controls which tags JSDoc recognizes and how they are interpreted
 */
export type JSDocDictionaries = Dictionary[];
/**
 * Controls @link tag text rendering
 */
export type LinkURL = boolean;
/**
 * Controls if current date is displayed in the footer of documentation
 */
export type ShowingTheCurrentDate = boolean;
/**
 * Path to layout file to use for documentation template
 */
export type OverridingLayoutFile = string;
/**
 * Controls if shortened or longhand version of a symbol will be shown in documentation
 */
export type ShowingLongnames = boolean;
/**
 * Controls @link tag text rendering
 */
export type LinkText = boolean;

export interface JSONSchemaForJSDocConfigurationFiles {
  plugins?: ConfiguringPlugins;
  recurseDepth?: SpecifyingRecursionDepth;
  source?: SpecifyingInputFiles;
  sourceType?: SpecifyingSourceType;
  opts?: IncorporatingCLIOptions;
  tags?: ConfiguringTagsAndTagDictionaries;
  templates?: ConfiguringTemplates;
  [k: string]: any;
}
/**
 * Determines the set of input files
 */
export interface SpecifyingInputFiles {
  include?: InputFilesPaths;
  exclude?: InputFilesExclusionPaths;
  includePattern?: InclusionRegExp;
  excludePattern?: ExclusionRegExp;
}
/**
 * Determines flags that `jsdoc` command will be invoked with
 */
export interface IncorporatingCLIOptions {
  template?: OutputTemplate;
  encoding?: InputFilesEncoding;
  destination?: OutputFolder;
  package?: Package;
  recurse?: RecurseToSubdirectories;
  tutorials?: TutorialsPath;
}
/**
 * Controls allowed JSDoc tags and their interpretation
 */
export interface ConfiguringTagsAndTagDictionaries {
  allowUnknownTags?: UnknownTags2;
  dictionaries?: JSDocDictionaries;
}
/**
 * Affect the appearance and content of generated documentation
 */
export interface ConfiguringTemplates {
  cleverLinks?: LinkURL;
  default?: {
    includeDate?: ShowingTheCurrentDate;
    layoutFile?: OverridingLayoutFile;
    staticFiles?: CopyingStaticFiles;
    useLongnameInNav?: ShowingLongnames;
    [k: string]: any;
  };
  monospaceLinks?: LinkText;
  [k: string]: any;
}
export interface CopyingStaticFiles {
  /**
   * An array of paths that should not be copied to the output directory
   */
  exclude?: string[];
  /**
   * A regular expression indicating which files to skip.
   */
  excludePattern?: string;
  /**
   * An array of paths whose contents should be copied to the output directory
   */
  include?: string[];
  /**
   * A regular expression indicating which files to copy
   */
  includePattern?: string;
}
