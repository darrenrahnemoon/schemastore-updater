/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Change the directory where Jekyll will read files
 */
export type SiteSource = string;
/**
 * Change the directory where Jekyll will write files
 */
export type SiteDestination = string;
/**
 * Disable custom plugins, and ignore symbolic links
 */
export type Safe = boolean;
/**
 * Exclude directories and/or files from the conversion. These exclusions are relative to the site's source directory and cannot be outside the source directory.
 */
export type Exclude = string[];
/**
 * Force inclusion of directories and/or files in the conversion. `.htaccess` is a good example since dotfiles are excluded by default.
 */
export type Include = string[];
/**
 * When clobbering the site destination, keep the selected files. Useful for files that are not generated by jekyll; e.g. files or assets that are generated by your build tool. The paths are relative to the `destination`.
 */
export type KeepFiles = string[];
/**
 * Set the time zone for site generation. This sets the `TZ` environment variable, which Ruby uses to handle time and date creation and manipulation. Any entry from the IANA Time Zone Database is valid, e.g. `America/New_York`.
 * When serving on a local machine, the default time zone is set by your operating system. But when served on a remote host/server, the default time zone depends on the server's setting or location.
 */
export type TimeZone = string;
/**
 * Set the encoding of files by name (only available for Ruby 1.9 or later). The default value is `utf-8` starting in 2.0.0, and `nil` before 2.0.0, which will yield the Ruby default of `ASCII-8BIT`. Available encodings can be shown by the command `ruby -e 'puts Encoding::list.join("
 * ")'`.
 */
export type Encoding = string;
export type FilePathForThisScope = string;
/**
 * A file from the directory specified by `layouts_dir`
 */
export type TheLayoutToUse = string;
/**
 * Permalinks are the output path for your pages, posts, or collections.
 * They allow you to structure the directories of your source code different from the directories in your output.
 */
export type PermalinkFormat = string;
export type FrontMatterDefaults = FrontMatterDefault[];
/**
 * Process and render draft posts.
 */
export type Drafts = boolean;
/**
 * Publish posts or collection documents with a future date.
 */
export type Future = boolean;
/**
 * Render posts that were marked as unpublished.
 */
export type Unpublished = boolean;
/**
 * Produce an index for related posts. Requires the `classifier-reborn` plugin.
 */
export type LSI = boolean;
/**
 * Limit the number of posts to parse and publish.
 */
export type LimitPosts = number;
/**
 * Enable the experimental incremental build feature. Incremental build only re-builds posts and pages that have changed, resulting in significant performance improvements for large sites, but may also break site generation in certain cases.
 */
export type IncrementalBuild = boolean;
/**
 * Generate a Liquid rendering profile to help you identify performance bottlenecks.
 */
export type LiquidProfiler = boolean;
/**
 * Cause a build to fail if there is a YAML syntax error in a page's front matter.
 */
export type StrictFrontMatter = boolean;
/**
 * Listen on the given port.
 */
export type LocalServerPort = number;
/**
 * Listen at the given hostname.
 */
export type LocalServerHostname = string;
/**
 * Serve the website from the given base URL.
 */
export type BaseURL = string;
/**
 * Reload a page automatically on the browser when its content is edited.
 */
export type LiveReload = boolean;
/**
 * Detach the server from the terminal.
 */
export type Detach = boolean;
export type Collections = StringArray | MappedCollection;
export type StringArray = string[];
export type LetJekyllRenderTheCollectionOutput = boolean;
export type SortDocumentsByFrontMatterKey = string;
/**
 * If `sort_by` metadata key has also been defined properly, `order` list takes precedence.
 */
export type ManuallyOrderDocumentsAsListed = string[];
/**
 * Directory to store all your collections in the same place.
 */
export type CollectionsDir = string;
export type PluginDirectory = string;
export type LayoutsDirectory = string;
export type DataDirectory = string;
export type IncludesDirectory = string;
export type MarkdownExtensions = string;
export type PluginWhitelist = string[];
export type ListOfPluginsToUse = string[];
export type MarkdownProcessor = string;
export type SyntaxHighlighter = string;
/**
 * Used for liquid filter `excerpt`.
 */
export type PostsExcerptSeparater = string;
/**
 * Only works locally. GitHub ignores it.
 */
export type AllowDirectoryListing = boolean;
/**
 * Catch non-existing filters.
 */
export type StrictFilters = boolean;
/**
 * Catch non-assigned variables.
 */
export type StrictVariables = boolean;
export type PrefixUsedForAutomaticallyGeneratedHeaderIDs = string;
export type StripAllFormattingFromHeaderTextForAutomaticIDGeneration = boolean;
export type UseAutomaticHeaderIDGeneration = boolean;
export type DefinesHowOftenALineNumberShouldBeMadeBold = number;
export type DefinesHowTheHighlightedCodeGetsStyled = string;
export type SetsTheDefaultLanguageForHighlightingCodeBlocks = string;
export type TheStartValueForTheLineNumbers = number;
export type DefinesHowAndIfLineNumbersShouldBeShown = string;
export type TheTabWidthUsedInHighlightedCode = number;
export type DefinesHowTheHighlightedCodeShouldBeWrapped = string;
export type UseCoderayForSyntaxHighlighting = boolean;
export type DefinesHowEntitiesAreOutput = "as_char" | "as_input" | "numeric" | "symbolic";
/**
 * The footnote backlink is just text, so any special HTML characters will be escaped.
 *
 * If the footnote backlint text is an empty string, no footnote backlinks will be generated.
 */
export type DefinesTheTextThatShouldBeUsedForTheFootnoteBacklinks = string;
/**
 * With the default of false the footnote backlink is placed at the end of the last paragraph if there is one, or an extra paragraph with only the footnote backlink is created.
 */
export type SpecifiesWhetherTheFootnoteBacklinkShouldAlwaysBeInline = boolean;
/**
 * This option can be used to specify the number that is used for the first footnote.
 */
export type TheNumberOfTheFirstFootnote = number;
export type EnablesASetOfGFMSpecificQuirks = boolean;
/**
 * If this option is c (may also be negative) then a header with level n will be output as a header with level c+n. If c+n is lower than 1, level 1 will be used. If c+n is greater than 6, level 6 will be used.
 */
export type SetsTheOutputOffsetForHeaders = number;
export type ConvertHTMLElementsToNativeElements = boolean;
export type DefinesTheLineWidthToBeUsedWhenOutputtingADocument = number;
/**
 * Specifies the math engine that should be used for converting math blocks/spans. If this option is set to `nil`, no math engine is used and the math blocks/spans are output as is.
 */
export type SetTheMathEngine = string;
export type ProcessKramdownSyntaxInBlockHTMLTags = boolean;
export type ProcessKramdownSyntaxInSpanHTMLTags = boolean;
/**
 * The entities identified by entity name or code point that should be used for, in order, a left single quote, a right single quote, a left double and a right double quote are specified by separating them with commas.
 */
export type DefinesTheHTMLEntityNamesOrCodePointsForSmartQuoteOutput = string;
/**
 * Specifies the syntax highlighter that should be used for highlighting code blocks and spans. If this option is set to `nil`, no syntax highlighting is done.
 */
export type SetTheSyntaxHighlighter = string | null;
/**
 * The individual levels can be specified by separating them with commas (e.g. 1,2,3) or by using the range syntax (e.g. 1..3). Only the specified levels are used for the table of contents.
 */
export type DefinesTheLevelsThatAreUsedForTheTableOfContents = 1 | 2 | 3 | 4 | 5 | 6;
export type TransliterateTheHeaderTextBeforeGeneratingTheID = boolean;

export interface JekyllStaticSiteGeneratorConfigFileSchema {
  source?: SiteSource;
  destination?: SiteDestination;
  safe?: Safe;
  exclude?: Exclude;
  include?: Include;
  keep_files?: KeepFiles;
  timezone?: TimeZone;
  encoding?: Encoding;
  defaults?: FrontMatterDefaults;
  show_drafts?: Drafts;
  future?: Future;
  unpublished?: Unpublished;
  lsi?: LSI;
  limit_posts?: LimitPosts;
  incremental?: IncrementalBuild;
  profile?: LiquidProfiler;
  strict_front_matter?: StrictFrontMatter;
  port?: LocalServerPort;
  host?: LocalServerHostname;
  baseurl?: BaseURL;
  livereload?: LiveReload;
  detach?: Detach;
  collections?: Collections;
  collections_dir?: CollectionsDir;
  plugins_dir?: PluginDirectory;
  layouts_dir?: LayoutsDirectory;
  data_dir?: DataDirectory;
  includes_dir?: IncludesDirectory;
  markdown_ext?: MarkdownExtensions;
  whitelist?: PluginWhitelist;
  plugins?: ListOfPluginsToUse;
  markdown?: MarkdownProcessor;
  highlighter?: SyntaxHighlighter;
  excerpt_separator?: PostsExcerptSeparater;
  show_dir_listing?: AllowDirectoryListing;
  permalink?: PermalinkFormat;
  paginate_path?: string;
  quiet?: boolean;
  verbose?: boolean;
  liquid?: {
    error_mode?: "lax" | "warn" | "strict";
    strict_filters?: StrictFilters;
    strict_variables?: StrictVariables;
  };
  rdiscount?: {
    extensions?: StringArray;
    [k: string]: any;
  };
  redcarpet?: {
    extensions?: StringArray;
    [k: string]: any;
  };
  kramdown?: {
    auto_id_prefix?: PrefixUsedForAutomaticallyGeneratedHeaderIDs;
    auto_id_stripping?: StripAllFormattingFromHeaderTextForAutomaticIDGeneration;
    auto_ids?: UseAutomaticHeaderIDGeneration;
    coderay_bold_every?: DefinesHowOftenALineNumberShouldBeMadeBold;
    coderay_css?: DefinesHowTheHighlightedCodeGetsStyled;
    coderay_default_lang?: SetsTheDefaultLanguageForHighlightingCodeBlocks;
    coderay_line_number_start?: TheStartValueForTheLineNumbers;
    coderay_line_numbers?: DefinesHowAndIfLineNumbersShouldBeShown;
    coderay_tab_width?: TheTabWidthUsedInHighlightedCode;
    coderay_wrap?: DefinesHowTheHighlightedCodeShouldBeWrapped;
    enable_coderay?: UseCoderayForSyntaxHighlighting;
    entity_output?: DefinesHowEntitiesAreOutput;
    footnote_backlink?: DefinesTheTextThatShouldBeUsedForTheFootnoteBacklinks;
    footnote_backlink_inline?: SpecifiesWhetherTheFootnoteBacklinkShouldAlwaysBeInline;
    footnote_nr?: TheNumberOfTheFirstFootnote;
    gfm_quirks?: EnablesASetOfGFMSpecificQuirks;
    hard_wrap?: boolean;
    header_offset?: SetsTheOutputOffsetForHeaders;
    html_to_native?: ConvertHTMLElementsToNativeElements;
    input?: string;
    line_width?: DefinesTheLineWidthToBeUsedWhenOutputtingADocument;
    link_defs?: PreDefinesLinkDefinitions;
    math_engine?: SetTheMathEngine;
    math_engine_opts?: SetTheMathEngineOptions;
    parse_block_html?: ProcessKramdownSyntaxInBlockHTMLTags;
    parse_span_html?: ProcessKramdownSyntaxInSpanHTMLTags;
    smart_quotes?: DefinesTheHTMLEntityNamesOrCodePointsForSmartQuoteOutput;
    syntax_highlighter?: SetTheSyntaxHighlighter;
    syntax_highlighter_opts?: SetTheSyntaxHighlighterOptions;
    toc_levels?: DefinesTheLevelsThatAreUsedForTheTableOfContents;
    transliterated_header_ids?: TransliterateTheHeaderTextBeforeGeneratingTheID;
    typographic_symbols?: DefinesAMappingFromTypographicalSymbolToOutputCharacters;
    show_warnings?: boolean;
    [k: string]: any;
  };
  webrick?: WEBrickOptions;
}
export interface FrontMatterDefault {
  scope?: Scope;
  values?: FrontMatterDefaultValues;
  [k: string]: any;
}
export interface Scope {
  path: FilePathForThisScope;
  type?: "pages" | "posts" | "drafts";
}
/**
 * Values that are set for the given scope. Can be overriden in the files front matter.
 */
export interface FrontMatterDefaultValues {
  layout?: TheLayoutToUse;
  output?: boolean;
  permalink?: PermalinkFormat;
  [k: string]: any;
}
export interface MappedCollection {
  output?: LetJekyllRenderTheCollectionOutput;
  permalink?: PermalinkFormat;
  sort_by?: SortDocumentsByFrontMatterKey;
  order?: ManuallyOrderDocumentsAsListed;
  [k: string]: any;
}
/**
 * Values are two element Arrays with the link URL and the link title
 */
export interface PreDefinesLinkDefinitions {
  [k: string]: string[];
}
/**
 * Specifies options for the math engine set via the math_engine configuration option.
 */
export interface SetTheMathEngineOptions {
  [k: string]: any;
}
/**
 * Specifies options for the syntax highlighter set via the syntax_highlighter configuration option.
 */
export interface SetTheSyntaxHighlighterOptions {
  [k: string]: any;
}
/**
 * Typographical symbols are normally output using their equivalent Unicode codepoint. However, sometimes one wants to change the output, mostly to fallback to a sequence of ASCII characters.
 */
export interface DefinesAMappingFromTypographicalSymbolToOutputCharacters {
  [k: string]: any;
}
/**
 * You can provide custom headers for your site.
 */
export interface WEBrickOptions {
  headers?: {
    [k: string]: any;
  };
}
